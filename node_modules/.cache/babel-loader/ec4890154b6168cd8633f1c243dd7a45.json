{"ast":null,"code":"import React, { useState, Component, Fragment, useEffect, useRef, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport ReactDOM from 'react-dom';\nimport { Manager, Popper as Popper$1, Reference } from 'react-popper';\nimport NumericInput from 'react-numeric-input';\nimport { NavLink as NavLink$1 } from 'react-router-dom';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\nfunction emptyFunction() {}\n\nfunction emptyFunctionWithReset() {}\n\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nvar factoryWithThrowingShims = function () {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret_1) {\n      // It is still safe when called from React.\n      return;\n    }\n\n    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n    err.name = 'Invariant Violation';\n    throw err;\n  }\n\n  shim.isRequired = shim;\n\n  function getShim() {\n    return shim;\n  } // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};\n\nvar propTypes = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  {\n    // By explicitly using `prop-types` you are opting into new production behavior.\n    // http://fb.me/prop-types-in-prod\n    module.exports = factoryWithThrowingShims();\n  }\n});\n\nvar Alert = function Alert(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var closeAlert = function closeAlert() {\n    setIsOpen(false);\n  };\n\n  var handleOnExit = function handleOnExit(node) {\n    node.classList.add(\"fade\");\n    props.onClose && props.onClose();\n  };\n\n  var handleOnExited = function handleOnExited(node) {\n    props.onClosed && props.onClosed();\n  };\n\n  var className = props.className,\n      color = props.color,\n      children = props.children,\n      dismiss = props.dismiss;\n  var alertClasses = classNames(\"alert\", color && \"alert-\".concat(color), className);\n  var alertComponent;\n\n  if (dismiss) {\n    alertComponent = React.createElement(Transition, {\n      \"in\": isOpen,\n      timeout: 150,\n      unmountOnExit: true,\n      onExit: function onExit(node) {\n        return handleOnExit(node);\n      },\n      onExited: function onExited(node) {\n        return handleOnExited(node);\n      }\n    }, React.createElement(\"div\", {\n      \"data-test\": \"alert\",\n      className: alertClasses,\n      role: \"alert\"\n    }, children, React.createElement(\"button\", {\n      onClick: closeAlert,\n      type: \"button\",\n      className: \"close\",\n      \"data-dismiss\": \"alert\",\n      \"aria-label\": \"Close\"\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"\\xD7\"))));\n  } else {\n    alertComponent = React.createElement(\"div\", {\n      \"data-test\": \"alert\",\n      className: alertClasses,\n      role: \"alert\"\n    }, children);\n  }\n\n  return alertComponent;\n};\n\nAlert.defaultProps = {\n  color: \"primary\"\n};\nAlert.propTypes = {\n  className: propTypes.string,\n  color: propTypes.oneOf([\"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\", \"dark\"]),\n  onClose: propTypes.func,\n  onClosed: propTypes.func\n};\n\nvar Animation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Animation, _Component);\n\n  function Animation(props) {\n    var _this;\n\n    _classCallCheck(this, Animation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Animation).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"updatePredicate\", function () {\n      var windowHeight = window.innerHeight;\n      var scroll = window.scrollY;\n      var docHeight = document.documentElement.offsetHeight;\n\n      if (windowHeight + scroll - 100 > _this.getOffset(_this.elemRef.current) && scroll < _this.getOffset(_this.elemRef.current) || windowHeight + scroll - 100 > _this.getOffset(_this.elemRef.current) + _this.elemRef.current.clientHeight && scroll < _this.getOffset(_this.elemRef.current) + _this.elemRef.current.clientHeight || windowHeight + scroll === docHeight && _this.getOffset(_this.elemRef.current) + 100 > docHeight) {\n        // if the predicate is true, change state\n        _this.setState({\n          isVisible: true,\n          revealed: true\n        });\n      } else {\n        //  was the \"revealing\" fired at least once?\n        if (_this.state.revealed) {\n          return;\n        } else {\n          // if it wasn't, hide\n          _this.setState({\n            isVisible: false,\n            revealed: true\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function (e) {\n      _this.setState({\n        countIterations: _this.state.countIterations + 1\n      });\n\n      if (_this.props.onAnimationStart) {\n        _this.props.onAnimationStart();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIteration\", function (e) {\n      if (_this.props.onAnimationIteration) {\n        _this.setState({\n          countIterations: _this.state.countIterations + 1\n        });\n\n        _this.props.onAnimationIteration();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnd\", function (e) {\n      _this.setState({\n        countIterations: _this.state.countIterations + 1\n      });\n\n      if (_this.props.onAnimationEnd && _this.props.count === _this.state.countIterations) {\n        _this.props.onAnimationEnd();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOffset\", function (elem) {\n      var box = elem.getBoundingClientRect();\n      var body = document.body;\n      var docEl = document.documentElement;\n      var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n      var clientTop = docEl.clientTop || body.clientTop || 0;\n      var top = box.top + scrollTop - clientTop;\n      return Math.round(top);\n    });\n\n    _this.state = {\n      isVisible: _this.props.reveal ? false : true,\n      revealed: _this.props.reveal ? false : true,\n      countIterations: 0\n    };\n    _this.elemRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Animation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // add EL on window if the animation is to \"reveal\"\n      if (this.props.reveal) {\n        window.addEventListener('scroll', this.updatePredicate);\n        this.updatePredicate();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.reveal) {\n        window.removeEventListener('scroll', this.updatePredicate);\n      }\n    } // the function to judge whether the animation should be started\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          Tag = _this$props.tag,\n          type = _this$props.type,\n          duration = _this$props.duration,\n          delay = _this$props.delay,\n          count = _this$props.count,\n          reveal = _this$props.reveal,\n          infinite = _this$props.infinite,\n          style = _this$props.style,\n          children = _this$props.children,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tag\", \"type\", \"duration\", \"delay\", \"count\", \"reveal\", \"infinite\", \"style\", \"children\"]);\n\n      var _this$state = this.state,\n          isVisible = _this$state.isVisible,\n          revealed = _this$state.revealed;\n      var styleObject = {\n        animationDuration: duration,\n        animationDelay: delay,\n        animationIterationCount: infinite ? false : count,\n        visibility: isVisible ? 'visible' : 'hidden',\n        animationName: type\n      };\n      var hiddenStyles = {\n        animationName: 'none',\n        visibility: 'hidden'\n      };\n      var getAllStyles = Object.assign(styleObject, style);\n      var classes = classNames(this.state.isVisible && 'animated', // will this work?\n      type && type, infinite && 'infinite', className);\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"animation\"\n      }, attributes, {\n        className: classes,\n        style: isVisible && revealed ? getAllStyles : hiddenStyles,\n        ref: this.elemRef,\n        onAnimationStart: this.handleStart,\n        onAnimationIteration: this.handleIteration,\n        onAnimationEnd: this.handleEnd\n      }), children);\n    }\n  }]);\n\n  return Animation;\n}(Component);\n\nAnimation.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  type: propTypes.string,\n  delay: propTypes.string,\n  count: propTypes.number,\n  onAnimationEnd: propTypes.func,\n  onAnimationStart: propTypes.func\n};\nAnimation.defaultProps = {\n  tag: 'div',\n  reveal: false,\n  duration: 1,\n  count: 1\n};\n\nvar Badge = function Badge(props) {\n  var Tag = props.tag,\n      className = props.className,\n      children = props.children,\n      color = props.color,\n      pill = props.pill,\n      attributes = _objectWithoutProperties(props, [\"tag\", \"className\", \"children\", \"color\", \"pill\"]);\n\n  var classes = classNames('badge', color, 'badge-' + color, pill ? 'badge-pill' : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"badge\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nBadge.defaultProps = {\n  tag: 'span',\n  color: 'default',\n  pill: false\n};\nBadge.propTypes = {\n  color: propTypes.string,\n  pill: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string\n};\n\nfunction omit(obj, omitKeys) {\n  var result = {};\n  Object.keys(obj).forEach(function (key) {\n    if (omitKeys.indexOf(key) === -1) {\n      result[key] = obj[key];\n    }\n  });\n  return result;\n}\n\nvar keyCodes = {\n  esc: 27,\n  space: 32,\n  tab: 9,\n  up: 38,\n  down: 40\n};\n\nvar returnAttributes = function returnAttributes(attributes) {\n  var newAttributesObject = Object.keys(attributes).reduce(function (previousValue, currentElement) {\n    if (attributes[currentElement]) previousValue[currentElement] = attributes[currentElement];\n    return previousValue;\n  }, {});\n  return newAttributesObject;\n};\n\nvar getColorClass = function getColorClass(color) {\n  var colorArray = color.split(\" \");\n  var specialColors = [\"danger\", \"warning\", \"success\", \"info\", \"default\", \"primary\", \"secondary\", \"elegant\", \"stylish\", \"unique\", \"special\"];\n  var colorClasses = \"\";\n  colorArray.forEach(function (color) {\n    if (specialColors.includes(color)) {\n      if (color.includes(\"dark\")) {\n        color.replace(\"-\", \"-color-\");\n        colorClasses += \"\".concat(color, \" \");\n      } else {\n        colorClasses += \"\".concat(color, \"-color\");\n      }\n    } else {\n      colorClasses += \"\".concat(color, \" \");\n    }\n  });\n  return colorClasses;\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      color = props.color,\n      light = props.light,\n      uppercase = props.uppercase,\n      bold = props.bold,\n      attributes = _objectWithoutProperties(props, [\"className\", \"color\", \"light\", \"uppercase\", \"bold\"]);\n\n  var classes = classNames('breadcrumb', uppercase && 'text-uppercase', bold && 'font-up-bold', light && 'white-text', color && getColorClass(color), className);\n  var children;\n\n  if (bold) {\n    children = React.Children.map(props.children, function (child) {\n      return React.cloneElement(child, {\n        bold: true\n      });\n    });\n  } else {\n    children = props.children;\n  }\n\n  return React.createElement(\"nav\", {\n    \"data-test\": \"breadcrumb\"\n  }, React.createElement(\"ol\", _extends({}, attributes, {\n    className: classes\n  }), children));\n};\n\nBreadcrumb.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  color: propTypes.string,\n  light: propTypes.bool,\n  uppercase: propTypes.bool,\n  bold: propTypes.bool\n};\n\nvar Fa = function Fa(props) {\n  var border = props.border,\n      brand = props.brand,\n      className = props.className,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      fixed = props.fixed,\n      flip = props.flip,\n      icon = props.icon,\n      inverse = props.inverse,\n      light = props.light,\n      list = props.list,\n      pull = props.pull,\n      pulse = props.pulse,\n      regular = props.regular,\n      rotate = props.rotate,\n      size = props.size,\n      spin = props.spin,\n      stack = props.stack,\n      attributes = _objectWithoutProperties(props, [\"border\", \"brand\", \"className\", \"fab\", \"fal\", \"far\", \"fixed\", \"flip\", \"icon\", \"inverse\", \"light\", \"list\", \"pull\", \"pulse\", \"regular\", \"rotate\", \"size\", \"spin\", \"stack\"]);\n\n  var iconPrefix = brand || fab ? \"fab\" : light || fal ? \"fal\" : regular || far ? \"far\" : \"fa\";\n  var classes = classNames(iconPrefix, list ? \"fa-li\" : false, icon ? \"fa-\".concat(icon) : false, size ? \"fa-\".concat(size) : false, fixed ? \"fa-fw\" : false, pull ? \"fa-pull-\".concat(pull) : false, border ? \"fa-border\" : false, spin ? \"fa-spin\" : false, pulse ? \"fa-pulse\" : false, rotate ? \"fa-rotate-\".concat(rotate) : false, flip ? \"fa-flip-\".concat(flip) : false, inverse ? \"fa-inverse\" : false, stack ? \"fa-\".concat(stack) : false, className);\n  return React.createElement(\"i\", _extends({\n    \"data-test\": \"fa\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nFa.propTypes = {\n  icon: propTypes.string.isRequired,\n  border: propTypes.bool,\n  brand: propTypes.bool,\n  className: propTypes.string,\n  fab: propTypes.bool,\n  fal: propTypes.bool,\n  far: propTypes.bool,\n  fixed: propTypes.bool,\n  flip: propTypes.string,\n  inverse: propTypes.bool,\n  light: propTypes.bool,\n  list: propTypes.bool,\n  pull: propTypes.string,\n  pulse: propTypes.bool,\n  regular: propTypes.bool,\n  rotate: propTypes.string,\n  spin: propTypes.bool,\n  size: propTypes.string,\n  stack: propTypes.string\n};\nFa.defaultProps = {\n  border: false,\n  brand: false,\n  className: \"\",\n  fab: false,\n  fal: false,\n  far: false,\n  fixed: false,\n  flip: \"\",\n  inverse: false,\n  light: false,\n  list: false,\n  pull: \"\",\n  pulse: false,\n  regular: false,\n  rotate: \"\",\n  spin: false,\n  size: \"\",\n  stack: \"\"\n};\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".bc-icons.breadcrumb-item::before,\\n.bc-icons.breadcrumb-item::after {\\n  content: none;\\n}\\n\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::before,\\n.bc-icons.breadcrumb-item + .active.breadcrumb-item::after{\\n  content: none;\\n}\\n\\n.bc-icons.breadcrumb-item.active {\\n  color: #eeeeee;\\n}\\n\";\nstyleInject(css);\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var active = props.active,\n      appendIcon = props.appendIcon,\n      children = props.children,\n      className = props.className,\n      bold = props.bold,\n      icon = props.icon,\n      iconBrand = props.iconBrand,\n      iconClassName = props.iconClassName,\n      iconLight = props.iconLight,\n      iconRegular = props.iconRegular,\n      iconSize = props.iconSize,\n      attributes = _objectWithoutProperties(props, [\"active\", \"appendIcon\", \"children\", \"className\", \"bold\", \"icon\", \"iconBrand\", \"iconClassName\", \"iconLight\", \"iconRegular\", \"iconSize\"]);\n\n  var classes = classNames(active ? \"active\" : false, icon && \"bc-icons\", \"breadcrumb-item\", className);\n  var iconClasses = classNames(appendIcon ? \"mx-2\" : \"mr-2\", iconClassName);\n\n  var WithBold = function WithBold(_ref) {\n    var children = _ref.children;\n    return bold ? React.createElement(\"strong\", null, children) : children;\n  };\n\n  var WithIcon = function WithIcon() {\n    if (icon) {\n      return React.createElement(Fragment, null, appendIcon && children, React.createElement(Fa, {\n        brand: iconBrand,\n        className: iconClasses,\n        icon: icon,\n        light: iconLight,\n        regular: iconRegular,\n        size: iconSize\n      }), !appendIcon && children);\n    }\n\n    return children;\n  };\n\n  return React.createElement(\"li\", _extends({\n    \"data-test\": \"breadcrumb-item\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(WithBold, null, React.createElement(WithIcon, null)));\n};\n\nBreadcrumbItem.propTypes = {\n  active: propTypes.bool,\n  appendIcon: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  bold: propTypes.bool,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconClassName: propTypes.string,\n  iconLight: propTypes.bool,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string\n};\nBreadcrumbItem.defaultProps = {\n  active: false,\n  appendIcon: false,\n  className: \"\",\n  bold: false,\n  icon: \"\",\n  iconBrand: false,\n  iconClassName: \"\",\n  iconLight: false,\n  iconRegular: false,\n  iconSize: \"\"\n};\nvar css$1 = \".Ripple {\\n  position: absolute;\\n  background: rgba(255, 255, 255, 0.3);\\n  border-radius: 50%;\\n  opacity: 1;\\n  transform: scale(0);\\n}\\n\\n.Ripple-outline {\\n  background: rgba(0, 0, 0, 0.2);\\n}\\n\\n.Ripple.is-reppling {\\n  animation: ripple 0.5s linear;\\n}\\n\\n.Ripple-parent {\\n  position: relative;\\n  overflow: hidden;\\n  touch-action: none;\\n}\\n\\n@keyframes ripple {\\n  100% {\\n    opacity: 0;\\n    transform: scale(3);\\n  }\\n}\\n\";\nstyleInject(css$1);\n\nvar Waves =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Waves, _React$Component);\n\n  function Waves(props) {\n    var _this;\n\n    _classCallCheck(this, Waves);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Waves).call(this, props));\n    _this.state = {\n      animate: false,\n      width: 0,\n      height: 0,\n      top: 0,\n      left: 0,\n      cursorPos: props.cursorPos\n    };\n    return _this;\n  }\n\n  _createClass(Waves, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (prevState.cursorPos.time !== this.props.cursorPos.time) {\n        if (prevState.animate) {\n          this.setState({\n            animate: false,\n            cursorPos: this.props.cursorPos\n          }, function () {\n            _this2.reppling();\n          });\n        } else this.reppling();\n      }\n    }\n  }, {\n    key: \"reppling\",\n    value: function reppling() {\n      // Get the element\n      var $ripple = ReactDOM.findDOMNode(this);\n      var $button = $ripple.parentNode;\n      var buttonPos = $button.getBoundingClientRect();\n      var buttonWidth = $button.offsetWidth;\n      var buttonHeight = $button.offsetHeight; // Make a Square Ripple\n\n      var rippleWidthShouldBe = Math.max(buttonHeight, buttonWidth); // Make Ripple Position to be center\n\n      var centerize = rippleWidthShouldBe / 2;\n      this.setState({\n        animate: true,\n        width: rippleWidthShouldBe,\n        height: rippleWidthShouldBe,\n        top: this.state.cursorPos.top - buttonPos.top - centerize,\n        left: this.state.cursorPos.left - buttonPos.left - centerize\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        \"data-test\": \"waves\",\n        className: 'Ripple ' + (this.props.outline || this.props.flat || this.props.dark ? 'Ripple-outline ' : '') + (this.state.animate ? 'is-reppling' : ''),\n        style: {\n          top: this.state.top + 'px',\n          left: this.state.left + 'px',\n          width: this.state.width + 'px',\n          height: this.state.height + 'px'\n        }\n      });\n    }\n  }]);\n\n  return Waves;\n}(React.Component);\n\nWaves.propTypes = {\n  outline: propTypes.bool,\n  flat: propTypes.bool,\n  animate: propTypes.bool,\n  cursorPos: propTypes.object,\n  children: propTypes.node\n};\n\nvar Button = function Button(props) {\n  var _classNames;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    e.stopPropagation(); // Waves - Get Cursor Position\n\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var active = props.active,\n      block = props.block,\n      circle = props.circle,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      download = props.download,\n      outline = props.outline,\n      size = props.size,\n      rounded = props.rounded,\n      gradient = props.gradient,\n      floating = props.floating,\n      flat = props.flat,\n      role = props.role,\n      type = props.type,\n      social = props.social,\n      action = props.action,\n      Tag = props.tag,\n      target = props.target,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutProperties(props, [\"active\", \"block\", \"circle\", \"className\", \"color\", \"disabled\", \"download\", \"outline\", \"size\", \"rounded\", \"gradient\", \"floating\", \"flat\", \"role\", \"type\", \"social\", \"action\", \"tag\", \"target\", \"innerRef\"]);\n\n  var classes = classNames(flat ? 'btn-flat' : gradient ? \"\".concat(gradient, \"-gradient\") : \"btn\".concat(outline ? '-outline' : '', \"-\").concat(color), 'btn', 'Ripple-parent', className, (_classNames = {\n    active: active,\n    'btn-floating': floating,\n    'btn-rounded': rounded,\n    'btn-circle': circle,\n    'btn-block': block,\n    'btn-action': action\n  }, _defineProperty(_classNames, \"btn-\".concat(social), social), _defineProperty(_classNames, \"btn-\".concat(size), size), _defineProperty(_classNames, \"disabled\", disabled), _classNames));\n\n  if (attributes.href && Tag === 'button') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"button\",\n    type: Tag === 'button' && !type ? 'button' : type,\n    target: target,\n    role: Tag === 'a' && !role ? 'button' : role,\n    className: classes,\n    ref: innerRef,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick\n  }, attributes, {\n    download: download,\n    disabled: disabled\n  }), props.children, !disabled && React.createElement(Waves, {\n    cursorPos: cursorPos,\n    outline: outline,\n    flat: flat\n  }));\n};\n\nButton.defaultProps = {\n  color: 'default',\n  tag: 'button'\n};\nButton.propTypes = {\n  active: propTypes.bool,\n  action: propTypes.bool,\n  block: propTypes.bool,\n  color: propTypes.string,\n  disabled: propTypes.bool,\n  download: propTypes.string,\n  gradient: propTypes.string,\n  role: propTypes.string,\n  type: propTypes.string,\n  outline: propTypes.bool,\n  rounded: propTypes.bool,\n  circle: propTypes.bool,\n  floating: propTypes.bool,\n  flat: propTypes.bool,\n  innerRef: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  onClick: propTypes.func,\n  size: propTypes.string,\n  social: propTypes.string,\n  children: propTypes.node,\n  tag: propTypes.string,\n  target: propTypes.string,\n  className: propTypes.string\n};\nvar css$2 = \".btn-group-vertical>.btn,\\n.btn-group-vertical>.btn+.btn-group,\\n.btn-group-vertical>.btn-group+.btn,\\n.btn-group-vertical>.btn-group+.btn-group {\\n  margin-left: 0px;\\n}\\n\\n.btn-group-lg>.btn {\\n  font-size: 0.9rem;\\n  padding: 1rem 2.4rem;\\n}\\n\\n.btn-group-sm>.btn {\\n  font-size: 0.6rem;\\n  padding: 0.5rem 1.6rem;\\n}\\n\\n.btn-floating.btn.btn-sm,\\n.btn-floating.btn.btn-lg {\\n  padding: 0;\\n}\\n\";\nstyleInject(css$2);\n\nvar ButtonGroup = function ButtonGroup(props) {\n  var className = props.className,\n      size = props.size,\n      vertical = props.vertical,\n      attributes = _objectWithoutProperties(props, [\"className\", \"size\", \"vertical\"]);\n\n  var classes = classNames(className, size ? 'btn-group-' + size : false, vertical ? 'btn-group-vertical' : 'btn-group');\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"button-group\"\n  }, attributes, {\n    className: classes\n  }), props.children);\n};\n\nButtonGroup.propTypes = {\n  'aria-label': propTypes.string,\n  className: propTypes.string,\n  role: propTypes.string,\n  size: propTypes.string,\n  children: propTypes.node,\n  vertical: propTypes.bool\n};\nButtonGroup.defaultProps = {\n  role: 'group'\n};\n\nvar ButtonToolbar = function ButtonToolbar(props) {\n  var className = props.className,\n      attributes = _objectWithoutProperties(props, [\"className\"]);\n\n  var classes = classNames(className, \"btn-toolbar\");\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"button-toolbar\"\n  }, attributes, {\n    className: classes\n  }), props.children);\n};\n\nButtonToolbar.propTypes = {\n  \"aria-label\": propTypes.string,\n  className: propTypes.string,\n  children: propTypes.node,\n  role: propTypes.string\n};\nButtonToolbar.defaultProps = {\n  role: \"toolbar\"\n};\n\nvar Card = function Card(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      cascade = props.cascade,\n      wide = props.wide,\n      narrow = props.narrow,\n      reverse = props.reverse,\n      testimonial = props.testimonial,\n      ecommerce = props.ecommerce,\n      collection = props.collection,\n      pricing = props.pricing,\n      personal = props.personal,\n      news = props.news,\n      color = props.color,\n      text = props.text,\n      border = props.border,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"cascade\", \"wide\", \"narrow\", \"reverse\", \"testimonial\", \"ecommerce\", \"collection\", \"pricing\", \"personal\", \"news\", \"color\", \"text\", \"border\"]);\n\n  var classes = classNames((_classNames = {\n    \"card-cascade\": cascade,\n    \"card-cascade wider\": wide,\n    \"card-cascade narrower\": narrow,\n    \"card-cascade wider reverse\": reverse,\n    \"testimonial-card\": testimonial,\n    \"card-ecommerce\": ecommerce,\n    \"collection-card\": collection,\n    \"pricing-card\": pricing,\n    \"card-personal\": personal,\n    \"news-card\": news\n  }, _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _defineProperty(_classNames, \"border-\".concat(border), border), _classNames), \"card\", color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCard.propTypes = {\n  border: propTypes.string,\n  cascade: propTypes.bool,\n  className: propTypes.string,\n  color: propTypes.string,\n  collection: propTypes.bool,\n  ecommerce: propTypes.bool,\n  narrow: propTypes.bool,\n  news: propTypes.bool,\n  pricing: propTypes.bool,\n  personal: propTypes.bool,\n  reverse: propTypes.bool,\n  tag: propTypes.string,\n  testimonial: propTypes.bool,\n  text: propTypes.string,\n  wide: propTypes.bool\n};\nCard.defaultProps = {\n  tag: \"div\"\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      Tag = props.tag,\n      cascade = props.cascade,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"cascade\"]);\n\n  var classes = classNames('card-body', cascade && 'card-body-cascade', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-body\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardBody.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  cascade: propTypes.bool\n};\nCardBody.defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      color = props.color,\n      text = props.text,\n      border = props.border,\n      transparent = props.transparent,\n      small = props.small,\n      muted = props.muted,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"color\", \"text\", \"border\", \"transparent\", \"small\", \"muted\"]);\n\n  var classes = classNames((_classNames = {\n    'white-text': color && !text\n  }, _defineProperty(_classNames, \"border-\".concat(border), border), _defineProperty(_classNames, 'bg-transparent', transparent), _defineProperty(_classNames, 'text-muted', muted), _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _classNames), 'card-footer', color, className);\n  var component = React.createElement(Tag, _extends({\n    \"data-test\": \"card-footer\"\n  }, attributes, {\n    className: classes\n  }));\n\n  if (small) {\n    component = React.createElement(Tag, _extends({}, attributes, {\n      className: classes\n    }), React.createElement(\"small\", null, \" \", props.children, \" \"));\n  }\n\n  return component;\n};\n\nCardFooter.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  color: propTypes.string,\n  text: propTypes.string,\n  border: propTypes.string,\n  transparent: propTypes.bool,\n  small: propTypes.bool,\n  muted: propTypes.bool\n};\nCardFooter.defaultProps = {\n  tag: 'div'\n};\n\nvar CardGroup = function CardGroup(props) {\n  var className = props.className,\n      Tag = props.tag,\n      deck = props.deck,\n      column = props.column,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"deck\", \"column\"]);\n\n  var classes = classNames(deck ? 'card-deck' : column ? 'card-columns' : 'card-group', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-group\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardGroup.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  deck: propTypes.bool,\n  column: propTypes.bool\n};\nCardGroup.defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var _classNames;\n\n  var className = props.className,\n      Tag = props.tag,\n      color = props.color,\n      text = props.text,\n      border = props.border,\n      transparent = props.transparent,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"color\", \"text\", \"border\", \"transparent\"]);\n\n  var classes = classNames((_classNames = {\n    'white-text': color && !text\n  }, _defineProperty(_classNames, \"border-\".concat(border), border), _defineProperty(_classNames, 'bg-transparent', transparent), _defineProperty(_classNames, \"\".concat(text, \"-text\"), text), _classNames), 'card-header', className, color);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-header\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  color: propTypes.string,\n  text: propTypes.string,\n  border: propTypes.string,\n  transparent: propTypes.bool\n};\nCardHeader.defaultProps = {\n  tag: 'div'\n};\n\nvar Mask = function Mask(props) {\n  var children = props.children,\n      className = props.className,\n      overlay = props.overlay,\n      pattern = props.pattern,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"overlay\", \"pattern\", \"tag\"]);\n\n  var classes = classNames('mask', pattern && \"pattern-\".concat(pattern), overlay && \"rgba-\".concat(overlay), className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"mask\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nMask.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  overlay: propTypes.string,\n  pattern: propTypes.oneOfType([propTypes.string, propTypes.number]),\n  tag: propTypes.string\n};\nMask.defaultProps = {\n  className: '',\n  overlay: '',\n  pattern: '',\n  tag: 'div'\n};\n\nvar View = function View(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var cascade = props.cascade,\n      children = props.children,\n      className = props.className,\n      hover = props.hover,\n      rounded = props.rounded,\n      src = props.src,\n      Tag = props.tag,\n      waves = props.waves,\n      zoom = props.zoom,\n      fixed = props.fixed,\n      attributes = _objectWithoutProperties(props, [\"cascade\", \"children\", \"className\", \"hover\", \"rounded\", \"src\", \"tag\", \"waves\", \"zoom\", \"fixed\"]);\n\n  var classes = classNames(\"view\", rounded && \"rounded\", zoom && \"zoom\", hover && \"overlay\", cascade && \"view-cascade\", waves ? \"Ripple-parent\" : false, className);\n  var viewStyle = src ? {\n    backgroundImage: \"url(\\\"\".concat(src, \"\\\")\"),\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center center\",\n    height: \"100vh\",\n    backgroundAttachment: fixed ? \"fixed\" : null\n  } : {};\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"view\"\n  }, attributes, {\n    className: classes,\n    onMouseDown: handleClick,\n    onTouchStart: handleClick,\n    style: viewStyle\n  }), children, waves && React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nView.defaultProps = {\n  cascade: false,\n  className: \"\",\n  hover: false,\n  rounded: false,\n  src: \"\",\n  tag: \"div\",\n  waves: false,\n  zoom: false\n};\nView.propTypes = {\n  cascade: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  hover: propTypes.bool,\n  rounded: propTypes.bool,\n  src: propTypes.string,\n  tag: propTypes.string,\n  waves: propTypes.bool,\n  zoom: propTypes.bool\n};\n\nvar CardImage = function CardImage(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var className = props.className,\n      overlay = props.overlay,\n      top = props.top,\n      waves = props.waves,\n      hover = props.hover,\n      cascade = props.cascade,\n      tag = props.tag,\n      zoom = props.zoom,\n      attributes = _objectWithoutProperties(props, [\"className\", \"overlay\", \"top\", \"waves\", \"hover\", \"cascade\", \"tag\", \"zoom\"]);\n\n  var classes = classNames(top && 'card-img-top', className);\n  var Tag = tag;\n  var innerContent = React.createElement(Tag, _extends({\n    \"data-test\": \"card-image\"\n  }, attributes, {\n    className: classes\n  }), props.children);\n\n  if (props.src) {\n    return React.createElement(View, {\n      zoom: zoom,\n      hover: hover,\n      cascade: cascade\n    }, React.createElement(\"div\", {\n      className: \"Ripple-parent\",\n      onMouseDown: handleClick,\n      style: {\n        touchAction: 'unset'\n      }\n    }, innerContent, React.createElement(Mask, {\n      overlay: overlay\n    }), waves && React.createElement(Waves, {\n      cursorPos: cursorPos\n    })));\n  } else {\n    return React.createElement(\"div\", null, innerContent);\n  }\n};\n\nCardImage.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  zoom: propTypes.bool,\n  waves: propTypes.bool,\n  className: propTypes.string,\n  cascade: propTypes.bool,\n  hover: propTypes.bool,\n  overlay: propTypes.string,\n  top: propTypes.bool,\n  src: propTypes.string,\n  children: propTypes.node\n};\nCardImage.defaultProps = {\n  tag: 'img',\n  overlay: 'white-slight',\n  waves: true,\n  hover: false,\n  cascade: false,\n  zoom: false\n};\n\nvar CardText = function CardText(props) {\n  var className = props.className,\n      Tag = props.tag,\n      textNode = props.children,\n      muted = props.muted,\n      small = props.small,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"children\", \"muted\", \"small\"]);\n\n  var classes = classNames('card-text', muted && 'text-muted', className);\n  var children = small ? React.createElement(\"small\", null, textNode) : textNode;\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-text\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCardText.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  muted: propTypes.bool,\n  small: propTypes.bool\n};\nCardText.defaultProps = {\n  tag: 'p'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      Tag = props.tag,\n      sub = props.sub,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"sub\"]);\n\n  var classes = classNames(sub ? 'card-subtitle' : 'card-title', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"card-title\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  sub: propTypes.bool,\n  className: propTypes.string\n};\nCardTitle.defaultProps = {\n  tag: 'h4',\n  sub: false\n};\n\nvar Control = function Control(props) {\n  var direction = props.direction,\n      className = props.className,\n      onClick = props.onClick,\n      Tag = props.tag,\n      iconLeft = props.iconLeft,\n      iconRight = props.iconRight,\n      testimonial = props.testimonial,\n      multiItem = props.multiItem;\n  var text;\n\n  if (direction === 'prev') {\n    text = 'Previous';\n  } else if (direction === 'next') {\n    text = 'Next';\n  }\n\n  var classes = classNames('carousel-control-' + direction, className);\n  var caretClasses = classNames('carousel-control-' + direction + '-icon');\n\n  if (testimonial) {\n    var arrow = direction === 'prev' ? 'left' : 'right';\n    classes = classNames('carousel-control-' + direction, arrow, 'carousel-control', className);\n    caretClasses = classNames('icon-' + direction);\n  }\n\n  if (multiItem) {\n    classes = classNames('btn-floating');\n  }\n\n  return React.createElement(Tag, {\n    \"data-test\": \"carousel-control\",\n    className: classes,\n    \"data-slide\": direction,\n    onClick: onClick\n  }, iconLeft ? React.createElement(Fa, {\n    icon: \"chevron-left\"\n  }) : iconRight ? React.createElement(Fa, {\n    icon: \"chevron-right\"\n  }) : React.createElement(\"div\", null, React.createElement(\"span\", {\n    className: caretClasses,\n    \"aria-hidden\": \"true\"\n  }), React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, text)));\n};\n\nControl.propTypes = {\n  onClick: propTypes.any,\n  direction: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  iconLeft: propTypes.bool,\n  iconRight: propTypes.bool,\n  testimonial: propTypes.bool,\n  multiItem: propTypes.bool\n};\nControl.defaultProps = {\n  tag: 'a'\n};\n\nvar CarouselIndicator = function CarouselIndicator(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      img = props.img,\n      alt = props.alt,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"className\", \"img\", \"alt\"]);\n\n  var classes = classNames(active && 'active', className);\n  return React.createElement(\"li\", _extends({\n    \"data-test\": \"carousel-indicator\"\n  }, attributes, {\n    className: classes\n  }), img && React.createElement(\"img\", {\n    src: img,\n    alt: alt,\n    className: \"img-fluid\"\n  }), children);\n};\n\nCarouselIndicator.propTypes = {\n  active: propTypes.bool.isRequired,\n  alt: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  img: propTypes.string\n};\nCarouselIndicator.defaultProps = {\n  alt: 'Carousel thumbnail',\n  className: '',\n  img: ''\n};\n\nvar CarouselIndicators = function CarouselIndicators(props) {\n  var children = props.children,\n      className = props.className,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var classes = classNames(\"carousel-indicators\", className);\n  return React.createElement(\"ol\", _extends({\n    \"data-test\": \"carousel-indicators\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselIndicators.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string\n};\nCarouselIndicators.defaultProps = {\n  className: \"\"\n};\nvar css$3 = \".carousel-inner {\\n  position: relative;\\n  overflow: hidden;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.carousel-fade .carousel-item {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  display: block !important;\\n  opacity: 0;\\n  z-index: 0;\\n  transition: transform 0ms ease-in-out, opacity 0.8s ease-out;\\n}\\n\\n.carousel-fade .carousel-item.active {\\n  position: relative;\\n  z-index: 1;\\n  opacity: 1;\\n}\\n\\n.carousel-multi-item .carousel-item {\\n  display: inline-block !important;\\n}\\n\\n.carousel .carousel-slide-item {\\n  transition: left 0.5s;\\n}\\n\\n.carousel-control-prev, .carousel-control-next, .carousel-item-prev, .carousel-item-next {\\n  z-index: 2;\\n}\\n\";\nstyleInject(css$3);\n\nvar Carousel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Carousel, _Component);\n\n  function Carousel(props) {\n    var _this;\n\n    _classCallCheck(this, Carousel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Carousel).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"clearCycleIntervalHandler\", function () {\n      return clearInterval(_this.cycleInterval);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"swipeAvailableHandler\", function () {\n      return _this.setState({\n        swipeAvailable: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"restartInterval\", function () {\n      if (_this.props.interval !== false) {\n        _this.clearCycleIntervalHandler();\n\n        _this.cycleInterval = setInterval(_this.next, _this.props.interval);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"next\", function () {\n      var nextIndex = _this.state.activeItem + 1;\n      var nextItem = nextIndex > _this.state.length ? 1 : nextIndex;\n\n      _this.goToIndex(nextItem);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"prev\", function () {\n      var prevIndex = _this.state.activeItem - 1;\n      var prevItem = prevIndex < 1 ? _this.state.length : prevIndex;\n\n      _this.goToIndex(prevItem);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goToIndex\", function (item) {\n      _this.setState(_objectSpread({}, _this.state, {\n        activeItem: item\n      }));\n\n      _this.restartInterval();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTouch\", function (e) {\n      _this.setState({\n        initialX: e.touches[0].clientX,\n        initialY: e.touches[0].clientY\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveTouch\", function (e) {\n      _this.setState({\n        swipeAvailable: false\n      });\n\n      var _this$state = _this.state,\n          initialX = _this$state.initialX,\n          initialY = _this$state.initialY;\n\n      if (initialX === null || initialY === null) {\n        return;\n      }\n\n      var currentX = e.touches[0].clientX;\n      var currentY = e.touches[0].clientY;\n      var diffX = initialX - currentX;\n      var diffY = initialY - currentY;\n\n      if (Math.abs(diffX) > Math.abs(diffY)) {\n        // sliding horizontally\n        if (diffX > 0) {\n          _this.next();\n        } else {\n          _this.prev();\n        }\n      }\n\n      _this.setState({\n        initialX: null,\n        initialY: null\n      });\n    });\n\n    _this.state = {\n      activeItem: _this.props.activeItem,\n      length: _this.props.length,\n      slide: _this.props.slide,\n      srcArray: [],\n      swipeAvailable: true,\n      initialX: null,\n      initialY: null\n    };\n    _this.carouselRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Carousel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.interval === false) {\n        return;\n      }\n\n      this.cycleInterval = setInterval(this.next, this.props.interval); // get images src atr\n\n      if (this.props.thumbnails) {\n        var CarouselItemsArray = this.carouselRef.current.querySelectorAll('.carousel-item img');\n        var srcArray = Array.prototype.map.call(CarouselItemsArray, function (item) {\n          return item.src;\n        });\n        this.setState(_objectSpread({}, this.state, {\n          srcArray: srcArray\n        }));\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.interval === false) {\n        return;\n      }\n\n      this.clearCycleIntervalHandler();\n    }\n  }, {\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        activeItem: this.state.activeItem,\n        length: this.state.length,\n        slide: this.state.slide\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          activeItem = _this$props.activeItem,\n          children = _this$props.children,\n          className = _this$props.className,\n          multiItem = _this$props.multiItem,\n          slide = _this$props.slide,\n          thumbnails = _this$props.thumbnails,\n          interval = _this$props.interval,\n          testimonial = _this$props.testimonial,\n          Tag = _this$props.tag,\n          length = _this$props.length,\n          showControls = _this$props.showControls,\n          showIndicators = _this$props.showIndicators,\n          onHoverStop = _this$props.onHoverStop,\n          attributes = _objectWithoutProperties(_this$props, [\"activeItem\", \"children\", \"className\", \"multiItem\", \"slide\", \"thumbnails\", \"interval\", \"testimonial\", \"tag\", \"length\", \"showControls\", \"showIndicators\", \"onHoverStop\"]);\n\n      var swipeAvailable = this.state.swipeAvailable;\n      var ariaLabel = 'carousel';\n      var classes = classNames('carousel', multiItem ? 'carousel-multi-item' : 'carousel-fade', thumbnails ? 'carousel-thumbnails' : '', testimonial ? 'testimonial-carousel' : '', className);\n      var CarouselIndicatorsArray = [];\n\n      var _loop = function _loop(i) {\n        CarouselIndicatorsArray.push(React.createElement(CarouselIndicator, {\n          img: thumbnails ? _this2.state.srcArray[i - 1] : null,\n          key: i,\n          active: _this2.state.activeItem === i,\n          onClick: function onClick() {\n            return _this2.goToIndex(i);\n          }\n        }));\n      };\n\n      for (var i = 1; i <= this.state.length; i++) {\n        _loop(i);\n      }\n\n      var isMultiItem = multiItem ? true : false;\n      var isTestimonial = testimonial ? true : false;\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"carousel\",\n        ref: this.carouselRef\n      }, attributes, {\n        className: classes,\n        \"aria-label\": ariaLabel,\n        onTouchStart: this.startTouch,\n        onTouchMove: swipeAvailable ? this.moveTouch : null,\n        onTouchEnd: this.swipeAvailableHandler,\n        onMouseEnter: onHoverStop ? this.clearCycleIntervalHandler : false,\n        onMouseLeave: onHoverStop ? this.restartInterval : false\n      }), showControls && multiItem && React.createElement(\"div\", {\n        className: \"controls-top\"\n      }, React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        iconLeft: true,\n        className: \"btn-floating\",\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        iconRight: true,\n        className: \"btn-floating\",\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), children, showControls && !multiItem && React.createElement(React.Fragment, null, React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        direction: \"prev\",\n        role: \"button\",\n        onClick: this.prev\n      }), React.createElement(Control, {\n        testimonial: isTestimonial,\n        multiItem: isMultiItem,\n        direction: \"next\",\n        role: \"button\",\n        onClick: this.next\n      })), showIndicators && React.createElement(CarouselIndicators, null, CarouselIndicatorsArray));\n    }\n  }]);\n\n  return Carousel;\n}(Component);\n\nCarousel.propTypes = {\n  activeItem: propTypes.number,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  multiItem: propTypes.bool,\n  interval: propTypes.oneOfType([propTypes.number, propTypes.bool]),\n  thumbnails: propTypes.bool,\n  testimonial: propTypes.bool,\n  showControls: propTypes.bool,\n  showIndicators: propTypes.bool,\n  slide: propTypes.bool,\n  length: propTypes.number,\n  onHoverStop: propTypes.bool\n};\nCarousel.defaultProps = {\n  tag: 'div',\n  interval: 6000,\n  showControls: true,\n  showIndicators: true,\n  onHoverStop: true\n};\nCarousel.childContextTypes = {\n  activeItem: propTypes.any,\n  length: propTypes.any,\n  slide: propTypes.any\n};\n\nvar CarouselCaption = function CarouselCaption(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('carousel-caption', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"carousel-caption\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselCaption.propTypes = {\n  active: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nCarouselCaption.defaultProps = {\n  tag: 'div'\n};\n\nvar CarouselInner = function CarouselInner(props) {\n  var active = props.active,\n      children = props.children,\n      childrenCount = props.childrenCount,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"childrenCount\", \"className\", \"tag\"]);\n\n  var classes = classNames('carousel-inner', active ? 'active' : '', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"carousel-inner\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nCarouselInner.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  active: propTypes.bool,\n  children: propTypes.node\n};\nCarouselInner.defaultProps = {\n  tag: 'div'\n};\n\nvar CarouselItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CarouselItem, _Component);\n\n  function CarouselItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CarouselItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CarouselItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"moveForward\", function () {\n      _this.style = {\n        position: 'absolute',\n        left: '100%'\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveBackwards\", function () {\n      _this.style = {\n        position: 'absolute',\n        left: '-100%'\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeVisible\", function () {\n      _this.style = {\n        left: '0'\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(CarouselItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          itemId = _this$props.itemId,\n          Tag = _this$props.tag,\n          attributes = _objectWithoutProperties(_this$props, [\"active\", \"children\", \"className\", \"itemId\", \"tag\"]);\n\n      itemId = parseInt(itemId, 10);\n      var classes = classNames('carousel-item', {\n        'active carousel-slide-item': this.context.slide,\n        'active': !this.context.slide && itemId === this.context.activeItem\n      }, className);\n      var slideIndex = this.context.activeItem - itemId;\n\n      if (this.context.slide) {\n        if (slideIndex < 0) {\n          this.moveForward();\n        } else if (slideIndex > 0) {\n          this.moveBackwards();\n        } else {\n          this.makeVisible();\n        }\n      }\n\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"carousel-item\"\n      }, attributes, {\n        className: classes,\n        style: this.style\n      }), children);\n    }\n  }]);\n\n  return CarouselItem;\n}(Component);\n\nCarouselItem.propTypes = {\n  active: propTypes.bool,\n  itemId: propTypes.any,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nCarouselItem.defaultProps = {\n  tag: 'div'\n};\nCarouselItem.contextTypes = {\n  activeItem: propTypes.any,\n  length: propTypes.any,\n  slide: propTypes.any\n};\n\nvar MDBCloseIcon = function MDBCloseIcon(_ref) {\n  var onClick = _ref.onClick,\n      className = _ref.className,\n      ariaLabel = _ref.ariaLabel,\n      props = _objectWithoutProperties(_ref, [\"onClick\", \"className\", \"ariaLabel\"]);\n\n  var onClickHandler = function onClickHandler(e) {\n    onClick && onClick(e);\n  };\n\n  var btnClasses = className ? ['close'].concat(_toConsumableArray(className.split(' '))) : ['close'];\n  return React.createElement(\"button\", _extends({\n    \"data-test\": \"close-button\",\n    type: \"button\"\n  }, props, {\n    className: btnClasses.join(' '),\n    onClick: onClickHandler,\n    \"aria-label\": ariaLabel\n  }), React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\"));\n};\n\nMDBCloseIcon.defaultProps = {\n  ariaLabel: 'Close'\n};\nMDBCloseIcon.propTypes = {\n  className: propTypes.string,\n  ariaLabel: propTypes.string,\n  onClick: propTypes.func\n};\n\nvar Col = function Col(props) {\n  var xs = props.xs,\n      sm = props.sm,\n      md = props.md,\n      lg = props.lg,\n      xl = props.xl,\n      top = props.top,\n      bottom = props.bottom,\n      middle = props.middle,\n      size = props.size,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"xs\", \"sm\", \"md\", \"lg\", \"xl\", \"top\", \"bottom\", \"middle\", \"size\", \"className\", \"tag\"]);\n\n  var classes = classNames(size && \"col-\" + size, xs && \"col-xs-\" + xs, sm && \"col-sm-\" + sm, md && \"col-md-\" + md, lg && \"col-lg-\" + lg, xl && \"col-xl-\" + xl, !size && !xs && !sm && !md && !lg && !xl ? \"col\" : \"\", top && \"align-self-start\", middle && \"align-self-center\", bottom && \"align-self-end\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"col\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nCol.propTypes = {\n  size: propTypes.string,\n  xs: propTypes.string,\n  sm: propTypes.string,\n  md: propTypes.string,\n  lg: propTypes.string,\n  xl: propTypes.string,\n  top: propTypes.bool,\n  bottom: propTypes.bool,\n  middle: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nCol.defaultProps = {\n  tag: \"div\",\n  xs: null,\n  sm: null,\n  md: null,\n  lg: null,\n  xl: null\n};\nvar SHOW = 'SHOW';\nvar SHOWN = 'SHOWN';\nvar HIDE = 'HIDE';\nvar HIDDEN = 'HIDDEN';\nvar DEFAULT_DELAYS = {\n  show: 350,\n  hide: 350\n};\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _classCallCheck(this, Collapse);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collapse).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setTransitionTag\", function (collapse, callback, delayType) {\n      _this.transitionTag = setTimeout(function () {\n        _this.setState({\n          collapse: collapse,\n          height: null\n        }, callback());\n      }, _this.getDelay(delayType));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openCollapse\", function () {\n      _this.setState({\n        collapse: SHOW\n      }, function () {\n        _this.setState({\n          height: _this.getHeight()\n        });\n\n        _this.setTransitionTag(SHOWN, _this.props.onOpened, 'show');\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeCollapse\", function () {\n      _this.setState({\n        height: _this.getHeight()\n      }, function () {\n        _this.setState({\n          collapse: HIDE,\n          height: _this.getHeight()\n        }, function () {\n          _this.setState({\n            height: 0\n          });\n        });\n      });\n\n      _this.setTransitionTag(HIDDEN, _this.props.onClosed, 'hide');\n    });\n\n    _this.state = {\n      id: props.id,\n      collapse: HIDDEN,\n      height: null\n    };\n    _this.element = null;\n    return _this;\n  }\n\n  _createClass(Collapse, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if ((this.props.isOpen === this.state.id || this.props.isOpen === true) && this.state.collapse === HIDDEN) {\n        this.openCollapse();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var collapse = prevState.collapse;\n      var willOpen = typeof this.props.isOpen !== 'boolean' ? this.props.isOpen === prevState.id : this.props.isOpen;\n\n      if (willOpen && this.state.collapse === HIDDEN) {\n        this.openCollapse();\n      } else if (!willOpen && collapse === SHOWN) {\n        this.closeCollapse();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.transitionTag);\n    }\n  }, {\n    key: \"getDelay\",\n    value: function getDelay(key) {\n      var delay = this.props.delay;\n\n      if (_typeof(delay) === 'object') {\n        return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];\n      }\n\n      return delay;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.element.scrollHeight;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          navbar = _this$props.navbar,\n          children = _this$props.children,\n          className = _this$props.className,\n          isOpen = _this$props.isOpen,\n          delay = _this$props.delay,\n          onOpened = _this$props.onOpened,\n          onClosed = _this$props.onClosed,\n          attributes = _objectWithoutProperties(_this$props, [\"navbar\", \"children\", \"className\", \"isOpen\", \"delay\", \"onOpened\", \"onClosed\"]);\n\n      var _this$state = this.state,\n          collapse = _this$state.collapse,\n          height = _this$state.height;\n      var collapseClass;\n\n      switch (collapse) {\n        case SHOW:\n          collapseClass = 'collapsing';\n          break;\n\n        case SHOWN:\n          collapseClass = 'collapse show';\n          break;\n\n        case HIDE:\n          collapseClass = 'collapsing';\n          break;\n\n        case HIDDEN:\n          collapseClass = 'collapse';\n          break;\n\n        default:\n          // HIDDEN\n          collapseClass = 'collapse';\n      }\n\n      var classes = classNames(collapseClass, navbar ? 'navbar-collapse' : false, className);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"collapse\"\n      }, attributes, {\n        style: _objectSpread({}, attributes.style, style),\n        className: classes,\n        ref: function ref(c) {\n          _this2.element = c;\n        }\n      }), children);\n    }\n  }]);\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = {\n  isOpen: propTypes.oneOfType([propTypes.string, propTypes.bool]),\n  id: propTypes.string,\n  className: propTypes.node,\n  children: propTypes.node,\n  navbar: propTypes.bool,\n  delay: propTypes.oneOfType([propTypes.shape({\n    show: propTypes.number,\n    hide: propTypes.number\n  }), propTypes.number]),\n  onOpened: propTypes.func,\n  onClosed: propTypes.func\n};\nCollapse.defaultProps = {\n  isOpen: '',\n  delay: DEFAULT_DELAYS,\n  onOpened: function onOpened() {},\n  onClosed: function onClosed() {}\n};\n\nvar Container = function Container(props) {\n  var fluid = props.fluid,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"fluid\", \"className\", \"tag\"]);\n\n  var classes = classNames(fluid ? 'container-fluid' : 'container', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"container\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nContainer.propTypes = {\n  fluid: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nContainer.defaultProps = {\n  tag: 'div',\n  fluid: false\n};\n\nvar DataTableHead = function DataTableHead(props) {\n  var color = props.color,\n      columns = props.columns,\n      handleSort = props.handleSort,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      textWhite = props.textWhite;\n  var theadClasses = classNames(color && (color !== \"dark\" && color !== \"light\" ? color : \"thead-\".concat(color)), textWhite && \"text-white\");\n  return React.createElement(Fragment, null, (scrollY || scrollX) && React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || \"auto\",\n        minWidth: \"\".concat(col.width, \"px\") || \"auto\"\n      }\n    });\n  })), React.createElement(\"thead\", {\n    \"data-test\": \"datatable-head\",\n    className: theadClasses || undefined\n  }, React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", _extends({\n      onClick: function onClick() {\n        return sortable && handleSort(col.field, col.sort);\n      },\n      key: col.field,\n      className: classNames(col.hasOwnProperty(\"minimal\") ? \"th-\".concat(col.minimal) : null, sortable && col.sort !== 'disabled' && (sorted && col.sort ? \"sorting_\".concat(col.sort === 'asc' ? 'desc' : 'asc') : 'sorting'))\n    }, col.attributes), col.label);\n  }))));\n};\n\nDataTableHead.propTypes = {\n  sorted: propTypes.bool.isRequired,\n  color: propTypes.string,\n  columns: propTypes.arrayOf(propTypes.object),\n  handleSort: propTypes.func,\n  scrollX: propTypes.bool,\n  scrollY: propTypes.bool,\n  sortable: propTypes.bool,\n  textWhite: propTypes.bool\n};\nDataTableHead.defaultProps = {\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  textWhite: false\n};\nvar css$4 = \".table-wrapper-scroll-y {\\n  display: block;\\n  max-height: 200px;\\n  overflow-y: auto;\\n  -ms-overflow-style: -ms-autohiding-scrollbar;\\n}\\n\";\nstyleInject(css$4);\n\nvar Table = function Table(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      dark = props.dark,\n      fixed = props.fixed,\n      theadColor = props.theadColor,\n      hover = props.hover,\n      maxHeight = props.maxHeight,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      scrollY = props.scrollY,\n      small = props.small,\n      striped = props.striped,\n      className = props.className,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"dark\", \"fixed\", \"theadColor\", \"hover\", \"maxHeight\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"scrollY\", \"small\", \"striped\", \"className\"]);\n\n  var tableClasses = classNames('table', {\n    'w-auto': autoWidth,\n    'table-bordered': bordered,\n    'table-borderless': borderless,\n    'btn-table': btn,\n    'table-fixed': fixed,\n    'table-hover': hover,\n    'table-sm': small,\n    'table-striped': striped\n  }, className);\n  var wrapperClasses = classNames({\n    'table-dark': dark,\n    'table-responsive': responsive,\n    'table-responsive-sm': responsiveSm,\n    'table-responsive-md': responsiveMd,\n    'table-responsive-lg': responsiveLg,\n    'table-responsive-xl': responsiveXl,\n    'table-wrapper-scroll-y': scrollY\n  });\n  var wrapperStyles = {\n    maxHeight: maxHeight ? \"\".concat(maxHeight) : null\n  };\n  return React.createElement(\"div\", {\n    \"data-test\": \"table\",\n    className: wrapperClasses,\n    style: wrapperStyles\n  }, React.createElement(\"table\", _extends({}, attributes, {\n    className: tableClasses\n  }), children));\n};\n\nTable.propTypes = {\n  autoWidth: propTypes.bool,\n  bordered: propTypes.bool,\n  borderless: propTypes.bool,\n  btn: propTypes.bool,\n  children: propTypes.node,\n  dark: propTypes.bool,\n  fixed: propTypes.bool,\n  theadColor: propTypes.string,\n  hover: propTypes.bool,\n  maxHeight: propTypes.string,\n  responsive: propTypes.bool,\n  responsiveSm: propTypes.bool,\n  responsiveMd: propTypes.bool,\n  responsiveLg: propTypes.bool,\n  responsiveXl: propTypes.bool,\n  scrollY: propTypes.bool,\n  small: propTypes.bool,\n  striped: propTypes.bool,\n  className: propTypes.string\n};\n\nvar TableBody = function TableBody(props) {\n  var children = props.children,\n      color = props.color,\n      rows = props.rows,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"rows\", \"textWhite\"]);\n\n  var classes = classNames(color, {\n    \"text-white\": textWhite\n  });\n  return React.createElement(\"tbody\", _extends({\n    \"data-test\": \"table-body\"\n  }, attributes, {\n    className: classes || undefined\n  }), rows && rows.map(function (row, index) {\n    return React.createElement(\"tr\", {\n      onClick: row.hasOwnProperty(\"clickEvent\") ? row.clickEvent : undefined,\n      key: index\n    }, Object.keys(row).map(function (key, index, array) {\n      if (key === \"clickEvent\") return null;\n\n      if (key !== \"colspan\") {\n        return array[index + 1] !== \"colspan\" ? React.createElement(\"td\", {\n          key: key\n        }, row[key]) : null;\n      } else {\n        return React.createElement(\"td\", {\n          key: key,\n          colSpan: row[key]\n        }, row[array[index - 1]]);\n      }\n    }));\n  }), children);\n};\n\nTableBody.propTypes = {\n  children: propTypes.node,\n  color: propTypes.string,\n  rows: propTypes.arrayOf(propTypes.object),\n  textWhite: propTypes.bool\n};\nTableBody.defaultProps = {\n  textWhite: false\n};\n\nvar TableFoot = function TableFoot(props) {\n  var _classNames;\n\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var isTheadColor = color === 'dark' || color === 'light';\n  var classes = classNames((_classNames = {\n    'text-white': textWhite\n  }, _defineProperty(_classNames, \"thead-\".concat(color), color && isTheadColor), _defineProperty(_classNames, \"\".concat(color), color && !isTheadColor), _classNames));\n  return React.createElement(\"thead\", _extends({\n    \"data-test\": \"table-foot\"\n  }, attributes, {\n    className: classes || undefined\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty('minimal') ? \"th-\".concat(col.minimal) : undefined\n    }, col.label);\n  })), children);\n};\n\nTableFoot.propTypes = {\n  children: propTypes.node,\n  color: propTypes.string,\n  columns: propTypes.arrayOf(propTypes.object),\n  textWhite: propTypes.bool\n};\nTableFoot.defaultProps = {\n  textWhite: false\n};\n\nvar DataTableTable = function DataTableTable(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      hover = props.hover,\n      handleSort = props.handleSort,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      small = props.small,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"hover\", \"handleSort\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"rows\", \"small\", \"sortable\", \"sorted\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\"]);\n\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-table\",\n    className: \"col-sm-12\"\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    sortable: sortable,\n    sorted: sorted\n  }), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows\n  }), React.createElement(TableFoot, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns\n  }), children));\n};\n\nDataTableTable.propTypes = {\n  autoWidth: propTypes.bool.isRequired,\n  bordered: propTypes.bool.isRequired,\n  borderless: propTypes.bool.isRequired,\n  btn: propTypes.bool.isRequired,\n  dark: propTypes.bool.isRequired,\n  fixed: propTypes.bool.isRequired,\n  hover: propTypes.bool.isRequired,\n  handleSort: propTypes.func.isRequired,\n  responsive: propTypes.bool.isRequired,\n  responsiveSm: propTypes.bool.isRequired,\n  responsiveMd: propTypes.bool.isRequired,\n  responsiveLg: propTypes.bool.isRequired,\n  responsiveXl: propTypes.bool.isRequired,\n  sortable: propTypes.bool.isRequired,\n  sorted: propTypes.bool.isRequired,\n  small: propTypes.bool.isRequired,\n  striped: propTypes.bool.isRequired,\n  theadColor: propTypes.string.isRequired,\n  theadTextWhite: propTypes.bool.isRequired,\n  tbodyColor: propTypes.string.isRequired,\n  tbodyTextWhite: propTypes.bool.isRequired,\n  columns: propTypes.arrayOf(propTypes.object),\n  rows: propTypes.arrayOf(propTypes.object),\n  children: propTypes.node\n};\n\nvar DataTableTableScroll = function DataTableTableScroll(props) {\n  var autoWidth = props.autoWidth,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      btn = props.btn,\n      children = props.children,\n      columns = props.columns,\n      dark = props.dark,\n      fixed = props.fixed,\n      hover = props.hover,\n      handleSort = props.handleSort,\n      handleTableBodyScroll = props.handleTableBodyScroll,\n      maxHeight = props.maxHeight,\n      responsive = props.responsive,\n      responsiveSm = props.responsiveSm,\n      responsiveMd = props.responsiveMd,\n      responsiveLg = props.responsiveLg,\n      responsiveXl = props.responsiveXl,\n      rows = props.rows,\n      scrollX = props.scrollX,\n      scrollY = props.scrollY,\n      small = props.small,\n      sortable = props.sortable,\n      sorted = props.sorted,\n      striped = props.striped,\n      tbodyColor = props.tbodyColor,\n      tbodyTextWhite = props.tbodyTextWhite,\n      theadColor = props.theadColor,\n      theadTextWhite = props.theadTextWhite,\n      translateScrollHead = props.translateScrollHead,\n      attributes = _objectWithoutProperties(props, [\"autoWidth\", \"bordered\", \"borderless\", \"btn\", \"children\", \"columns\", \"dark\", \"fixed\", \"hover\", \"handleSort\", \"handleTableBodyScroll\", \"maxHeight\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"rows\", \"scrollX\", \"scrollY\", \"small\", \"sortable\", \"sorted\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\", \"translateScrollHead\"]);\n\n  var minWidth = scrollX ? columns.map(function (col) {\n    return col.width;\n  }).reduce(function (prev, curr) {\n    return prev + curr;\n  }, 0) + 'px' : 'auto';\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-table-scroll\",\n    className: \"col-sm-12\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scroll\"\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHead\",\n    style: {\n      overflow: 'hidden'\n    }\n  }, React.createElement(\"div\", {\n    className: \"dataTables_scrollHeadInner\",\n    style: {\n      position: 'relative',\n      transform: \"translateX(-\".concat(translateScrollHead, \"px)\"),\n      boxSizing: 'content-box',\n      paddingRight: scrollY ? '15px' : null,\n      minWidth: minWidth\n    }\n  }, React.createElement(Table, _extends({\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(DataTableHead, {\n    color: theadColor,\n    textWhite: theadTextWhite,\n    columns: columns,\n    handleSort: handleSort,\n    scrollX: scrollX,\n    scrollY: scrollY,\n    sortable: sortable,\n    sorted: sorted\n  })))), React.createElement(\"div\", {\n    className: \"dataTable_scrollBody\",\n    style: {\n      overflow: 'auto'\n    },\n    onScroll: handleTableBodyScroll\n  }, React.createElement(Table, _extends({\n    style: {\n      minWidth: minWidth\n    },\n    autoWidth: autoWidth,\n    bordered: bordered,\n    borderless: borderless,\n    btn: btn,\n    dark: dark,\n    fixed: fixed,\n    hover: hover,\n    maxHeight: maxHeight,\n    responsive: responsive,\n    responsiveSm: responsiveSm,\n    responsiveMd: responsiveMd,\n    responsiveLg: responsiveLg,\n    responsiveXl: responsiveXl,\n    scrollY: scrollY,\n    small: small,\n    striped: striped,\n    className: \"dataTable\"\n  }, attributes), React.createElement(\"colgroup\", null, columns.map(function (col) {\n    return React.createElement(\"col\", {\n      key: col.field,\n      style: {\n        width: \"\".concat(col.width, \"px\") || 'auto',\n        minWidth: \"\".concat(col.width, \"px\") || 'auto'\n      }\n    });\n  })), React.createElement(TableBody, {\n    color: tbodyColor,\n    textWhite: tbodyTextWhite,\n    rows: rows\n  }), children))));\n};\n\nDataTableTableScroll.propTypes = {\n  autoWidth: propTypes.bool.isRequired,\n  bordered: propTypes.bool.isRequired,\n  borderless: propTypes.bool.isRequired,\n  btn: propTypes.bool.isRequired,\n  dark: propTypes.bool.isRequired,\n  fixed: propTypes.bool.isRequired,\n  hover: propTypes.bool.isRequired,\n  handleSort: propTypes.func.isRequired,\n  handleTableBodyScroll: propTypes.func.isRequired,\n  responsive: propTypes.bool.isRequired,\n  responsiveSm: propTypes.bool.isRequired,\n  responsiveMd: propTypes.bool.isRequired,\n  responsiveLg: propTypes.bool.isRequired,\n  responsiveXl: propTypes.bool.isRequired,\n  sortable: propTypes.bool.isRequired,\n  sorted: propTypes.bool.isRequired,\n  small: propTypes.bool.isRequired,\n  striped: propTypes.bool.isRequired,\n  theadColor: propTypes.string.isRequired,\n  theadTextWhite: propTypes.bool.isRequired,\n  tbodyColor: propTypes.string.isRequired,\n  tbodyTextWhite: propTypes.bool.isRequired,\n  translateScrollHead: propTypes.number.isRequired,\n  columns: propTypes.arrayOf(propTypes.object),\n  rows: propTypes.arrayOf(propTypes.object),\n  children: propTypes.node,\n  maxHeight: propTypes.string,\n  scrollX: propTypes.bool,\n  scrollY: propTypes.bool\n};\n\nvar DataTableSelect = function DataTableSelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      entries = _ref.entries,\n      label = _ref.label;\n\n  var getValue = function getValue(e) {\n    var value = parseInt(e.target.value, 10);\n    onChange(value);\n  };\n\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-select\",\n    className: \"dataTables_length bs-select\"\n  }, React.createElement(\"label\", null, label, React.createElement(\"select\", {\n    value: value,\n    onChange: getValue,\n    className: \"custom-select custom-select-sm form-control form-control-sm\",\n    style: {\n      marginLeft: '.5rem'\n    }\n  }, entries.map(function (entry) {\n    return React.createElement(\"option\", {\n      key: entry,\n      value: entry\n    }, entry);\n  }))));\n};\n\nDataTableSelect.propTypes = {\n  entries: propTypes.arrayOf(propTypes.number).isRequired,\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]).isRequired,\n  onChange: propTypes.func.isRequired,\n  value: propTypes.number.isRequired\n};\n\nvar DataTableEntries = function DataTableEntries(props) {\n  var handleEntriesChange = props.handleEntriesChange,\n      displayEntries = props.displayEntries,\n      entries = props.entries,\n      entriesArr = props.entriesArr,\n      paging = props.paging,\n      label = props.label,\n      barReverse = props.barReverse;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-entries\",\n    className: \"col-sm-12 col-md-6\"\n  }, paging && displayEntries && React.createElement(DataTableSelect, {\n    value: entries,\n    onChange: handleEntriesChange,\n    entries: entriesArr,\n    label: label,\n    barReverse: barReverse\n  }));\n};\n\nDataTableEntries.propTypes = {\n  barReverse: propTypes.bool,\n  handleEntriesChange: propTypes.func.isRequired,\n  displayEntries: propTypes.bool.isRequired,\n  entries: propTypes.number.isRequired,\n  entriesArr: propTypes.arrayOf(propTypes.number).isRequired,\n  paging: propTypes.bool.isRequired,\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]).isRequired\n};\n\nvar DataTableInput = function DataTableInput(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      label = _ref.label;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-input\",\n    className: \"dataTables_filter\"\n  }, React.createElement(\"label\", null, label || 'Search', React.createElement(\"input\", {\n    value: value,\n    onChange: onChange,\n    type: \"search\",\n    className: \"form-control form-control-sm\",\n    placeholder: label || 'Search'\n  })));\n};\n\nDataTableInput.propTypes = {\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]),\n  onChange: propTypes.func,\n  value: propTypes.string\n};\n\nvar DataTableSearch = function DataTableSearch(props) {\n  var handleSearchChange = props.handleSearchChange,\n      search = props.search,\n      searching = props.searching,\n      label = props.label,\n      barReverse = props.barReverse;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-search\",\n    className: \"col-sm-12 col-md-6\"\n  }, searching && React.createElement(DataTableInput, {\n    value: search,\n    onChange: handleSearchChange,\n    label: label,\n    barReverse: barReverse\n  }));\n};\n\nDataTableSearch.propTypes = {\n  barReverse: propTypes.bool,\n  handleSearchChange: propTypes.func.isRequired,\n  search: propTypes.string.isRequired,\n  searching: propTypes.bool.isRequired,\n  label: propTypes.string\n};\n\nvar DataTableInfo = function DataTableInfo(props) {\n  var activePage = props.activePage,\n      entries = props.entries,\n      filteredRows = props.filteredRows,\n      info = props.info,\n      pages = props.pages,\n      label = props.label;\n  return React.createElement(\"div\", {\n    \"data-test\": \"datatable-info\",\n    className: \"col-sm-12 col-md-5\"\n  }, info && React.createElement(\"div\", {\n    className: \"dataTables_info\",\n    role: \"status\",\n    \"aria-live\": \"polite\"\n  }, label[0], ' ', activePage > 0 ? activePage * entries + 1 : activePage + 1, ' ', label[1], ' ', pages.length - 1 > activePage ? pages[activePage].length * (activePage + 1) : filteredRows.length, ' ', label[2], \" \", filteredRows.length, \" \", label[3]));\n};\n\nDataTableInfo.propTypes = {\n  activePage: propTypes.number.isRequired,\n  entries: propTypes.number.isRequired,\n  filteredRows: propTypes.array.isRequired,\n  info: propTypes.bool.isRequired,\n  pages: propTypes.array.isRequired,\n  label: propTypes.arrayOf(propTypes.string)\n};\nDataTableInfo.defaultProps = {\n  label: ['Showing', 'to', 'of', 'entries']\n};\n\nvar Pagination = function Pagination(props) {\n  var _classNames;\n\n  var children = props.children,\n      circle = props.circle,\n      className = props.className,\n      color = props.color,\n      Tag = props.tag,\n      size = props.size,\n      attributes = _objectWithoutProperties(props, [\"children\", \"circle\", \"className\", \"color\", \"tag\", \"size\"]);\n\n  var classes = classNames((_classNames = {\n    'pagination-circle': circle\n  }, _defineProperty(_classNames, \"pg-\".concat(color), color), _defineProperty(_classNames, \"pagination-\".concat(size), size), _classNames), 'pagination', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"pagination\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPagination.propTypes = {\n  children: propTypes.node,\n  circle: propTypes.bool,\n  className: propTypes.string,\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  size: propTypes.oneOf(['lg', 'sm'])\n};\nPagination.defaultProps = {\n  circle: false,\n  className: '',\n  color: '',\n  tag: 'ul'\n};\n\nvar PageItem = function PageItem(props) {\n  var active = props.active,\n      className = props.className,\n      children = props.children,\n      disabled = props.disabled,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"className\", \"children\", \"disabled\", \"tag\"]);\n\n  var classes = classNames({\n    'disabled': disabled,\n    'active': active\n  }, 'page-item', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"page-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPageItem.propTypes = {\n  active: propTypes.bool,\n  className: propTypes.string,\n  children: propTypes.node,\n  disabled: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nPageItem.defaultProps = {\n  active: false,\n  className: '',\n  disabled: false,\n  tag: 'li'\n};\n\nvar PageLink = function PageLink(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames('page-link', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"page-link\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPageLink.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nPageLink.defaultProps = {\n  tag: 'a'\n};\n\nvar DataTablePagination =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTablePagination, _Component);\n\n  function DataTablePagination() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DataTablePagination);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DataTablePagination)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      pages: _this.props.pages,\n      pGroups: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps) {\n      if (prevProps.pages !== _this.props.pages) {\n        _this.setState({\n          pages: _this.props.pages\n        }, function () {\n          return _this.groupPages();\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pagesIndexify\", function () {\n      var mutablePages = _toConsumableArray(_this.state.pages);\n\n      mutablePages.forEach(function (page, index) {\n        return page.index = index;\n      });\n      return mutablePages;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"groupPages\", function () {\n      var pGroups = [];\n\n      var pages = _this.pagesIndexify();\n\n      while (pages.length > 0) {\n        pGroups.push(pages.splice(0, _this.props.pagesAmount));\n      }\n\n      _this.setState({\n        pGroups: pGroups\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"choosePagesGroup\", function () {\n      var pGroupNumber = Math.floor(_this.props.activePage / _this.props.pagesAmount);\n      return _this.state.pGroups.length ? _this.state.pGroups[pGroupNumber] : [];\n    });\n\n    return _this;\n  }\n\n  _createClass(DataTablePagination, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.groupPages();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          activePage = _this$props.activePage,\n          changeActivePage = _this$props.changeActivePage,\n          pages = _this$props.pages,\n          label = _this$props.label;\n      return React.createElement(\"div\", {\n        \"data-test\": \"datatable-pagination\",\n        className: \"col-sm-12 col-md-7\"\n      }, React.createElement(\"div\", {\n        className: \"dataTables_paginate\"\n      }, React.createElement(Pagination, null, React.createElement(PageItem, {\n        disabled: activePage <= 0\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[0],\n        onClick: function onClick() {\n          return changeActivePage(activePage - 1);\n        }\n      }, React.createElement(\"span\", null, label[0]))), this.choosePagesGroup().map(function (page) {\n        return React.createElement(PageItem, {\n          key: Object.keys(page[0])[0] + page.index,\n          active: page.index === activePage\n        }, React.createElement(PageLink, {\n          className: \"page-link\",\n          onClick: function onClick() {\n            return changeActivePage(page.index);\n          }\n        }, page.index + 1, page.index === activePage && React.createElement(\"span\", {\n          className: \"sr-only\"\n        }, \"(current)\")));\n      }), React.createElement(PageItem, {\n        disabled: !pages.length || activePage === pages.length - 1\n      }, React.createElement(PageLink, {\n        className: \"page-link\",\n        \"aria-label\": label[1],\n        onClick: function onClick() {\n          return changeActivePage(activePage + 1);\n        }\n      }, React.createElement(\"span\", null, label[1]))))));\n    }\n  }]);\n\n  return DataTablePagination;\n}(Component);\n\nDataTablePagination.propTypes = {\n  activePage: propTypes.number.isRequired,\n  changeActivePage: propTypes.func.isRequired,\n  pages: propTypes.array.isRequired,\n  pagesAmount: propTypes.number.isRequired,\n  label: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nvar DataTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataTable, _Component);\n\n  function DataTable(props) {\n    var _this;\n\n    _classCallCheck(this, DataTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTable).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setData\", function () {\n      var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n\n      _this.setState(function () {\n        return {\n          columns: columns,\n          rows: rows,\n          filteredRows: rows\n        };\n      }, callback && typeof callback === 'function' && function () {\n        return callback();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setUnsearchable\", function (columns) {\n      var unsearchable = [];\n      columns.forEach(function (column) {\n        if (column.searchable !== undefined && column.searchable === false) {\n          unsearchable.push(column.field);\n        }\n      });\n\n      _this.setState({\n        unsearchable: unsearchable\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchData\", function (link) {\n      fetch(link).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        return _this.setData(json.rows, json.columns);\n      })[\"catch\"](function (err) {\n        return console.log(err);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pagesAmount\", function () {\n      return Math.ceil(_this.state.filteredRows.length / _this.state.entries);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRowsInitialy\", function () {\n      var _this$state = _this.state,\n          rows = _this$state.rows,\n          entries = _this$state.entries,\n          pages = _this$state.pages;\n\n      var pagesAmount = _this.pagesAmount();\n\n      for (var i = 1; i <= pagesAmount; i++) {\n        var pageEndIndex = i * entries;\n        pages.push(rows.slice(pageEndIndex - entries, pageEndIndex));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEntriesChange\", function (value) {\n      _this.setState({\n        entries: Array.isArray(value) ? value[0] : value\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSearchChange\", function (e) {\n      _this.setState({\n        search: e.target.value\n      }, function () {\n        return _this.filterRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkFieldValue\", function (array, field) {\n      return array[field] && typeof array[field] !== 'string' ? array[field].props.searchValue : array[field];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkField\", function (field, a, b, direction) {\n      var _ref = [_this.checkFieldValue(a, field), _this.checkFieldValue(b, field)],\n          aField = _ref[0],\n          bField = _ref[1];\n      return direction === 'desc' ? aField < bField : aField > bField;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"sort\", function (rows, sortRows, field, direction) {\n      rows.sort(function (a, b) {\n        if (sortRows && sortRows.includes(field)) {\n          return _this.checkField(field, a, b, direction);\n        }\n\n        return direction === 'asc' ? a[field] < b[field] ? -1 : 1 : a[field] > b[field] ? -1 : 1;\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSort\", function (field, sort) {\n      if (sort === 'disabled') return;\n\n      _this.setState(function (prevState) {\n        var sortRows = _this.props.sortRows;\n        var rows = prevState.rows,\n            columns = prevState.columns;\n        var direction = sort === 'desc' ? 'desc' : 'asc';\n\n        _this.sort(rows, sortRows, field, direction);\n\n        columns.forEach(function (col) {\n          if (col.sort === 'disabled') return;\n          col.sort = col.field === field ? col.sort === 'desc' ? 'asc' : 'desc' : '';\n        });\n        return {\n          rows: rows,\n          columns: columns,\n          sorted: true\n        };\n      }, function () {\n        return _this.filterRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"filterRows\", function () {\n      var _this$state2 = _this.state,\n          unsearchable = _this$state2.unsearchable,\n          search = _this$state2.search;\n      var sortRows = _this.props.sortRows;\n\n      _this.setState(function (prevState) {\n        var filteredRows = prevState.rows.filter(function (row) {\n          for (var key in row) {\n            if ((!unsearchable.length || !unsearchable.includes(key)) && typeof row[key] !== 'function') {\n              var stringValue = '';\n\n              if (sortRows && typeof row[key] !== 'string') {\n                stringValue = row[key].props.searchValue;\n              } else {\n                if (row[key]) {\n                  stringValue = row[key].toString();\n                }\n              }\n\n              if (stringValue.toLowerCase().includes(search.toLowerCase())) return true;\n            }\n          }\n\n          return false;\n        });\n        if (filteredRows.length === 0) filteredRows.push({\n          message: 'No matching records found',\n          colspan: prevState.columns.length\n        });\n        return {\n          filteredRows: filteredRows,\n          activePage: 0\n        };\n      }, function () {\n        return _this.paginateRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"paginateRows\", function () {\n      var pagesAmount = _this.pagesAmount();\n\n      _this.setState(function (prevState) {\n        var pages = prevState.pages,\n            entries = prevState.entries,\n            filteredRows = prevState.filteredRows,\n            activePage = prevState.activePage;\n        var paging = _this.props.paging;\n        pages = [];\n\n        if (paging) {\n          for (var i = 1; i <= pagesAmount; i++) {\n            var pageEndIndex = i * entries;\n            pages.push(filteredRows.slice(pageEndIndex - entries, pageEndIndex));\n          }\n\n          activePage = activePage < pages.length || activePage === 0 ? activePage : pages.length - 1;\n        } else {\n          pages.push(filteredRows);\n          activePage = 0;\n        }\n\n        return {\n          pages: pages,\n          filteredRows: filteredRows,\n          activePage: activePage\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeActivePage\", function (page) {\n      _this.setState({\n        activePage: page\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTableBodyScroll\", function (e) {\n      _this.setState({\n        translateScrollHead: e.target.scrollLeft\n      });\n    });\n\n    _this.state = {\n      activePage: 0,\n      columns: props.data.columns || [],\n      entries: props.entries,\n      filteredRows: props.data.rows || [],\n      order: props.order || [],\n      pages: [],\n      rows: props.data.rows || [],\n      search: '',\n      sorted: false,\n      translateScrollHead: 0,\n      unsearchable: []\n    };\n\n    if (_this.props.paging) {\n      _this.paginateRowsInitialy();\n    } else {\n      _this.state.pages.push(_this.state.rows);\n    }\n\n    return _this;\n  }\n\n  _createClass(DataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var data = this.props.data;\n      var _this$state3 = this.state,\n          order = _this$state3.order,\n          columns = _this$state3.columns;\n\n      if (typeof data === 'string') {\n        this.fetchData(data);\n      }\n\n      order.length && this.handleSort(order[0], order[1]);\n      this.setUnsearchable(columns);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, _) {\n      var data = this.props.data;\n\n      if (prevProps.data !== data) {\n        typeof data === 'string' ? this.fetchData(data) : this.setData(data.rows, data.columns, this.paginateRows);\n        this.setUnsearchable(this.state.columns);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          autoWidth = _this$props.autoWidth,\n          bordered = _this$props.bordered,\n          borderless = _this$props.borderless,\n          barReverse = _this$props.barReverse,\n          btn = _this$props.btn,\n          className = _this$props.className,\n          children = _this$props.children,\n          dark = _this$props.dark,\n          data = _this$props.data,\n          displayEntries = _this$props.displayEntries,\n          entriesOptions = _this$props.entriesOptions,\n          entriesLabel = _this$props.entriesLabel,\n          exportToCSV = _this$props.exportToCSV,\n          fixed = _this$props.fixed,\n          hover = _this$props.hover,\n          info = _this$props.info,\n          infoLabel = _this$props.infoLabel,\n          maxHeight = _this$props.maxHeight,\n          order = _this$props.order,\n          pagesAmount = _this$props.pagesAmount,\n          paging = _this$props.paging,\n          paginationLabel = _this$props.paginationLabel,\n          responsive = _this$props.responsive,\n          responsiveSm = _this$props.responsiveSm,\n          responsiveMd = _this$props.responsiveMd,\n          responsiveLg = _this$props.responsiveLg,\n          responsiveXl = _this$props.responsiveXl,\n          searching = _this$props.searching,\n          searchLabel = _this$props.searchLabel,\n          scrollX = _this$props.scrollX,\n          scrollY = _this$props.scrollY,\n          small = _this$props.small,\n          sortable = _this$props.sortable,\n          striped = _this$props.striped,\n          tbodyColor = _this$props.tbodyColor,\n          tbodyTextWhite = _this$props.tbodyTextWhite,\n          theadColor = _this$props.theadColor,\n          theadTextWhite = _this$props.theadTextWhite,\n          sortRows = _this$props.sortRows,\n          attributes = _objectWithoutProperties(_this$props, [\"autoWidth\", \"bordered\", \"borderless\", \"barReverse\", \"btn\", \"className\", \"children\", \"dark\", \"data\", \"displayEntries\", \"entriesOptions\", \"entriesLabel\", \"exportToCSV\", \"fixed\", \"hover\", \"info\", \"infoLabel\", \"maxHeight\", \"order\", \"pagesAmount\", \"paging\", \"paginationLabel\", \"responsive\", \"responsiveSm\", \"responsiveMd\", \"responsiveLg\", \"responsiveXl\", \"searching\", \"searchLabel\", \"scrollX\", \"scrollY\", \"small\", \"sortable\", \"striped\", \"tbodyColor\", \"tbodyTextWhite\", \"theadColor\", \"theadTextWhite\", \"sortRows\"]);\n\n      var _this$state4 = this.state,\n          columns = _this$state4.columns,\n          entries = _this$state4.entries,\n          filteredRows = _this$state4.filteredRows,\n          pages = _this$state4.pages,\n          activePage = _this$state4.activePage,\n          search = _this$state4.search,\n          translateScrollHead = _this$state4.translateScrollHead;\n      var tableClasses = classNames('dataTables_wrapper dt-bootstrap4', className);\n      return React.createElement(\"div\", {\n        \"data-test\": \"datatable\",\n        className: tableClasses\n      }, React.createElement(\"div\", {\n        className: \"row\".concat(barReverse ? ' flex-row-reverse' : '')\n      }, React.createElement(DataTableEntries, {\n        paging: paging,\n        displayEntries: displayEntries,\n        entries: entries,\n        handleEntriesChange: this.handleEntriesChange,\n        entriesArr: entriesOptions,\n        label: entriesLabel,\n        barReverse: barReverse\n      }), React.createElement(DataTableSearch, {\n        handleSearchChange: this.handleSearchChange,\n        search: search,\n        searching: searching,\n        label: searchLabel,\n        barReverse: barReverse\n      })), !scrollY && !scrollX && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTable, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        hover: hover,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage],\n        sorted: this.state.sorted\n      }, attributes))), (scrollY || scrollX) && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableTableScroll, _extends({\n        autoWidth: autoWidth,\n        bordered: bordered,\n        borderless: borderless,\n        btn: btn,\n        dark: dark,\n        fixed: fixed,\n        handleTableBodyScroll: this.handleTableBodyScroll,\n        hover: hover,\n        maxHeight: maxHeight,\n        responsive: responsive,\n        responsiveSm: responsiveSm,\n        responsiveMd: responsiveMd,\n        responsiveLg: responsiveLg,\n        responsiveXl: responsiveXl,\n        scrollX: scrollX,\n        scrollY: scrollY,\n        small: small,\n        striped: striped,\n        theadColor: theadColor,\n        theadTextWhite: theadTextWhite,\n        columns: columns,\n        handleSort: this.handleSort,\n        sortable: sortable,\n        sorted: this.state.sorted,\n        tbodyColor: tbodyColor,\n        tbodyTextWhite: tbodyTextWhite,\n        rows: pages[activePage],\n        translateScrollHead: translateScrollHead\n      }, attributes))), paging && React.createElement(\"div\", {\n        className: \"row\"\n      }, React.createElement(DataTableInfo, {\n        activePage: activePage,\n        entries: entries,\n        filteredRows: filteredRows,\n        info: info,\n        pages: pages,\n        label: infoLabel\n      }), React.createElement(DataTablePagination, {\n        activePage: activePage,\n        changeActivePage: this.changeActivePage,\n        pages: pages,\n        pagesAmount: pagesAmount,\n        label: paginationLabel\n      })));\n    }\n  }]);\n\n  return DataTable;\n}(Component);\n\nDataTable.propTypes = {\n  autoWidth: propTypes.bool,\n  barReverse: propTypes.bool,\n  bordered: propTypes.bool,\n  borderless: propTypes.bool,\n  btn: propTypes.bool,\n  className: propTypes.string,\n  children: propTypes.node,\n  dark: propTypes.bool,\n  data: propTypes.oneOfType([propTypes.object, propTypes.string]),\n  displayEntries: propTypes.bool,\n  entries: propTypes.number,\n  entriesLabel: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object]),\n  entriesOptions: propTypes.arrayOf(propTypes.number),\n  exportToCSV: propTypes.bool,\n  fixed: propTypes.bool,\n  hover: propTypes.bool,\n  info: propTypes.bool,\n  infoLabel: propTypes.arrayOf(propTypes.string),\n  maxHeight: propTypes.string,\n  order: propTypes.arrayOf(propTypes.string),\n  pagesAmount: propTypes.number,\n  paging: propTypes.bool,\n  paginationLabel: propTypes.arrayOf(propTypes.string),\n  responsive: propTypes.bool,\n  responsiveSm: propTypes.bool,\n  responsiveMd: propTypes.bool,\n  responsiveLg: propTypes.bool,\n  responsiveXl: propTypes.bool,\n  searching: propTypes.bool,\n  searchLabel: propTypes.string,\n  scrollX: propTypes.bool,\n  scrollY: propTypes.bool,\n  sortable: propTypes.bool,\n  sortRows: propTypes.arrayOf(propTypes.string),\n  small: propTypes.bool,\n  striped: propTypes.bool,\n  theadColor: propTypes.string,\n  theadTextWhite: propTypes.bool,\n  tbodyColor: propTypes.string,\n  tbodyTextWhite: propTypes.bool\n};\nDataTable.defaultProps = {\n  autoWidth: false,\n  barReverse: false,\n  bordered: false,\n  borderless: false,\n  btn: false,\n  dark: false,\n  data: {\n    columns: [],\n    rows: []\n  },\n  displayEntries: true,\n  entries: 10,\n  entriesLabel: 'Show entries',\n  entriesOptions: [10, 20, 50, 100],\n  exportToCSV: false,\n  fixed: false,\n  hover: false,\n  info: true,\n  infoLabel: ['Showing', 'to', 'of', 'entries'],\n  order: [],\n  pagesAmount: 8,\n  paging: true,\n  paginationLabel: ['Previous', 'Next'],\n  responsive: false,\n  responsiveSm: false,\n  responsiveMd: false,\n  responsiveLg: false,\n  responsiveXl: false,\n  searching: true,\n  searchLabel: 'Search',\n  scrollX: false,\n  scrollY: false,\n  sortable: true,\n  small: false,\n  striped: false,\n  theadColor: '',\n  theadTextWhite: false,\n  tbodyColor: '',\n  tbodyTextWhite: false\n};\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getContainer\", function () {\n      return ReactDOM.findDOMNode(_assertThisInitialized(_this));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addEvents\", function () {\n      ['click', 'touchstart', 'keyup'].forEach(function (event) {\n        return document.addEventListener(event, _this.handleDocumentClick, true);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeEvents\", function () {\n      ['click', 'touchstart', 'keyup'].forEach(function (event) {\n        return document.removeEventListener(event, _this.handleDocumentClick, true);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDocumentClick\", function (e) {\n      var keyCode = e.which,\n          type = e.type,\n          target = e.target;\n      var tab = keyCodes.tab;\n      var MOUSE_RIGHT_CLICK = keyCode === 3;\n      var TAB = keyCode === tab;\n      var KEYUP = type === 'keyup';\n      if (MOUSE_RIGHT_CLICK || KEYUP && !TAB) return;\n\n      var container = _this.getContainer();\n\n      if (container.contains(target) && container !== target && (!KEYUP || TAB)) {\n        return;\n      }\n\n      _this.toggle();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (e, items) {\n      var up = keyCodes.up,\n          down = keyCodes.down;\n      var keyCode = e.which,\n          target = e.target;\n      var UP = keyCode === up;\n      var DOWN = keyCode === down;\n\n      var index = _toConsumableArray(items).findIndex(function (item) {\n        return item === target;\n      });\n\n      if (UP && index > 0) {\n        index -= 1;\n      }\n\n      if (DOWN && index < items.length - 1) {\n        index += 1;\n      }\n\n      if (index < 0) {\n        index = 0;\n      }\n\n      items[index].focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (e) {\n      var isOpen = _this.state.isOpen;\n      var disabled = _this.props.disabled;\n      var keyCode = e.which,\n          target = e.target;\n      var esc = keyCodes.esc,\n          up = keyCodes.up,\n          down = keyCodes.down,\n          space = keyCodes.space;\n      var SPACE = keyCode === space;\n      var ESC = keyCode === esc;\n\n      if (![esc, up, down, space].includes(keyCode) || /button/i.test(target.tagName) && SPACE || /input|textarea/i.test(target.tagName)) {\n        return;\n      }\n\n      e.preventDefault();\n      if (disabled) return;\n\n      var container = _this.getContainer();\n\n      if (SPACE && isOpen && container !== target) {\n        target.click();\n      }\n\n      if (ESC || !isOpen) {\n        _this.toggle();\n\n        var btn = container.children[0];\n        btn.focus();\n        return;\n      }\n\n      var items = container.querySelectorAll(\".dropdown-menu .dropdown-item:not(.disabled)\");\n      items.length && _this.handleFocus(e, items);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggle\", function () {\n      _this.setState({\n        isOpen: !_this.state.isOpen\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        isOpen: this.state.isOpen,\n        dropup: this.props.dropup,\n        dropright: this.props.dropright,\n        dropleft: this.props.dropleft,\n        toggle: this.toggle\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeEvents();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.handleEventsBinding();\n    }\n  }, {\n    key: \"handleEventsBinding\",\n    value: function handleEventsBinding() {\n      this.state.isOpen ? this.addEvents() : this.removeEvents();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _omit = omit(this.props, ['toggle', 'disabled']),\n          className = _omit.className,\n          children = _omit.children,\n          dropup = _omit.dropup,\n          group = _omit.group,\n          size = _omit.size,\n          dropright = _omit.dropright,\n          dropleft = _omit.dropleft;\n\n      var classes = classNames((_classNames = {\n        'btn-group': group\n      }, _defineProperty(_classNames, \"btn-group-\".concat(size), !!size), _defineProperty(_classNames, \"dropdown\", !group), _defineProperty(_classNames, \"show\", this.state.isOpen), _defineProperty(_classNames, \"dropup\", dropup), _defineProperty(_classNames, \"dropright\", dropright), _defineProperty(_classNames, \"dropleft\", dropleft), _classNames), className);\n      return React.createElement(Manager, null, React.createElement(\"div\", {\n        \"data-test\": \"dropdown\",\n        className: classes,\n        onKeyDown: this.handleKeyDown\n      }, children));\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\nDropdown.propTypes = {\n  disabled: propTypes.bool,\n  dropup: propTypes.bool,\n  dropright: propTypes.bool,\n  dropleft: propTypes.bool,\n  group: propTypes.bool,\n  size: propTypes.string,\n  tag: propTypes.string,\n  toggle: propTypes.func,\n  children: propTypes.node,\n  className: propTypes.string\n};\nDropdown.defaultProps = {\n  dropup: false,\n  dropright: false,\n  dropleft: false,\n  tag: 'div'\n};\nDropdown.childContextTypes = {\n  toggle: propTypes.func.isRequired,\n  isOpen: propTypes.bool.isRequired,\n  dropup: propTypes.bool.isRequired,\n  dropright: propTypes.bool.isRequired,\n  dropleft: propTypes.bool.isRequired\n};\n\nvar DropdownItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownItem, _React$Component);\n\n  function DropdownItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropdownItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          header = _this$props.header,\n          divider = _this$props.divider,\n          onClick = _this$props.onClick,\n          toggle = _this$props.toggle;\n\n      if (disabled || header || divider) {\n        e.preventDefault();\n        return;\n      }\n\n      if (onClick) {\n        onClick(e);\n      }\n\n      if (toggle) {\n        _this.context.toggle(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTabIndex\", function () {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          header = _this$props2.header,\n          divider = _this$props2.divider;\n\n      if (disabled || header || divider) {\n        return '-1';\n      }\n\n      return '0';\n    });\n\n    return _this;\n  }\n\n  _createClass(DropdownItem, [{\n    key: \"render\",\n    value: function render() {\n      var tabIndex = this.getTabIndex();\n\n      var _omit = omit(this.props, ['toggle']),\n          className = _omit.className,\n          divider = _omit.divider,\n          Tag = _omit.tag,\n          header = _omit.header,\n          href = _omit.href,\n          active = _omit.active,\n          disabled = _omit.disabled,\n          props = _objectWithoutProperties(_omit, [\"className\", \"divider\", \"tag\", \"header\", \"href\", \"active\", \"disabled\"]);\n\n      var classes = classNames({\n        'active': active,\n        'disabled': disabled,\n        'dropdown-item': !divider && !header,\n        'dropdown-header': header,\n        'dropdown-divider': divider\n      }, className);\n\n      if (Tag === 'button') {\n        if (header) {\n          Tag = 'h6';\n        } else if (divider) {\n          Tag = 'div';\n        } else if (href) {\n          Tag = 'a';\n        }\n      }\n\n      var type = Tag === 'button' && (props.onClick || this.props.toggle) ? 'button' : undefined;\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"dropdown-item\",\n        type: type\n      }, props, {\n        tabIndex: tabIndex,\n        className: classes,\n        onClick: this.onClick\n      }));\n    }\n  }]);\n\n  return DropdownItem;\n}(React.Component);\n\nDropdownItem.propTypes = {\n  children: propTypes.node,\n  active: propTypes.bool,\n  disabled: propTypes.bool,\n  divider: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  header: propTypes.bool,\n  onClick: propTypes.func,\n  className: propTypes.string,\n  toggle: propTypes.bool\n};\nDropdownItem.defaultProps = {\n  tag: 'button',\n  toggle: true\n};\nDropdownItem.contextTypes = {\n  toggle: propTypes.func\n};\n\nvar DropdownMenuComponent = function DropdownMenuComponent(_ref) {\n  var Tag = _ref.tag,\n      tabIndex = _ref.tabIndex,\n      role = _ref.role,\n      attributes = _ref.attributes,\n      aria = _ref.aria,\n      d_key = _ref.d_key,\n      children = _ref.children;\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"dropdown-menu-component\",\n    tabIndex: tabIndex,\n    role: role\n  }, attributes, {\n    \"aria-hidden\": aria,\n    key: d_key\n  }), children);\n};\n\nDropdownMenuComponent.propTypes = {\n  aria: propTypes.bool.isRequired,\n  attributes: propTypes.object.isRequired,\n  d_key: propTypes.string.isRequired,\n  role: propTypes.string.isRequired,\n  tabIndex: propTypes.string.isRequired,\n  tag: propTypes.any.isRequired,\n  children: propTypes.node.isRequired\n};\nvar css$5 = \".dropup .dropdown-menu {\\n  top: auto !important;\\n  bottom: 100% !important;\\n  transform: translate3d(5px, 5px, 0px) !important;\\n}\\n\\n.dropdown-menu-right {\\n  left: 0 !important;\\n  right: auto !important;\\n}\\n\";\nstyleInject(css$5);\nvar noFlipModifier = {\n  flip: {\n    enabled: false\n  }\n};\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownMenu, _Component);\n\n  function DropdownMenu() {\n    _classCallCheck(this, DropdownMenu);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropdownMenu).apply(this, arguments));\n  }\n\n  _createClass(DropdownMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _this = this;\n\n      var _this$props = this.props,\n          basic = _this$props.basic,\n          className = _this$props.className,\n          right = _this$props.right,\n          children = _this$props.children,\n          tag = _this$props.tag,\n          flip = _this$props.flip,\n          color = _this$props.color,\n          attrs = _objectWithoutProperties(_this$props, [\"basic\", \"className\", \"right\", \"children\", \"tag\", \"flip\", \"color\"]);\n\n      var classes = classNames((_classNames = {\n        'dropdown-menu-right': right\n      }, _defineProperty(_classNames, \"dropdown-\".concat(color), color), _defineProperty(_classNames, \"show\", this.context.isOpen), _defineProperty(_classNames, \"basic\", basic), _classNames), 'dropdown-menu', className);\n      var Tag = tag;\n\n      if (this.context.isOpen) {\n        var position1 = this.context.dropup ? 'top' : this.context.dropright ? 'right' : this.context.dropleft ? 'left' : 'bottom';\n        var position2 = right ? 'end' : 'start';\n        attrs.placement = \"\".concat(position1, \"-\").concat(position2);\n        attrs.component = tag;\n        attrs.modifiers = !flip ? noFlipModifier : undefined;\n      }\n\n      return React.createElement(Popper$1, {\n        modifires: attrs.modifiers,\n        eventsEnabled: true,\n        positionFixed: false,\n        placement: attrs.placement,\n        \"data-test\": \"dropdown-menu\"\n      }, function (_ref) {\n        var placement = _ref.placement,\n            ref = _ref.ref,\n            style = _ref.style;\n        return React.createElement(Tag, {\n          ref: ref,\n          style: style,\n          \"data-placement\": placement,\n          className: classes\n        }, React.createElement(DropdownMenuComponent, {\n          isOpen: _this.context.isOpen,\n          tag: Tag,\n          tabIndex: \"-1\",\n          role: \"menu\",\n          attributes: attrs,\n          aria: !_this.context.isOpen,\n          d_key: \"dropDownMenu\",\n          color: color\n        }, children));\n      });\n    }\n  }]);\n\n  return DropdownMenu;\n}(Component);\n\nDropdownMenu.propTypes = {\n  children: propTypes.node.isRequired,\n  basic: propTypes.bool,\n  className: propTypes.string,\n  flip: propTypes.bool,\n  right: propTypes.bool,\n  tag: propTypes.string\n};\nDropdownMenu.defaultProps = {\n  basic: false,\n  className: '',\n  flip: false,\n  right: false,\n  tag: 'div',\n  color: false\n};\nDropdownMenu.contextTypes = {\n  isOpen: propTypes.bool.isRequired,\n  dropup: propTypes.bool.isRequired,\n  dropright: propTypes.bool.isRequired,\n  dropleft: propTypes.bool.isRequired,\n  color: propTypes.oneOfType([propTypes.oneOf(['primary', 'default', 'secondary', 'success', 'dark', 'danger', 'info', 'warning', 'ins']), propTypes.bool])\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownToggle, _React$Component);\n\n  function DropdownToggle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropdownToggle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownToggle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          nav = _this$props.nav,\n          tag = _this$props.tag,\n          onClick = _this$props.onClick;\n\n      if (disabled) {\n        e.preventDefault();\n        return;\n      }\n\n      if (nav && !tag) {\n        e.preventDefault();\n      }\n\n      if (onClick) {\n        onClick(e);\n      }\n\n      _this.context.toggle(e);\n    });\n\n    return _this;\n  }\n\n  _createClass(DropdownToggle, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          color = _this$props2.color,\n          caret = _this$props2.caret,\n          nav = _this$props2.nav,\n          tag = _this$props2.tag,\n          props = _objectWithoutProperties(_this$props2, [\"className\", \"color\", \"caret\", \"nav\", \"tag\"]);\n\n      var ariaLabel = props['aria-label'] || 'Toggle Dropdown';\n      var classes = classNames({\n        'dropdown-toggle': caret,\n        'nav-link': nav\n      }, className);\n      var children = props.children || React.createElement(\"span\", {\n        className: \"sr-only\"\n      }, ariaLabel);\n      var Tag = tag;\n\n      if (nav && !tag) {\n        Tag = 'a';\n        props.href = '#';\n      } else if (!tag) {\n        Tag = Button;\n        props.color = color;\n      }\n\n      return React.createElement(Reference, {\n        \"data-test\": \"dropdown-toggle\"\n      }, function (_ref) {\n        var ref = _ref.ref;\n        return tag || nav ? React.createElement(Tag, _extends({}, props, {\n          className: classes,\n          onClick: _this2.onClick,\n          \"aria-expanded\": _this2.context.isOpen,\n          ref: ref\n        }), children) : React.createElement(Tag, _extends({}, props, {\n          className: classes,\n          onClick: _this2.onClick,\n          \"aria-expanded\": _this2.context.isOpen,\n          innerRef: ref\n        }), children);\n      });\n    }\n  }]);\n\n  return DropdownToggle;\n}(React.Component);\n\nDropdownToggle.propTypes = {\n  caret: propTypes.bool,\n  color: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  onClick: propTypes.func,\n  'aria-haspopup': propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  nav: propTypes.bool\n};\nDropdownToggle.defaultProps = {\n  'aria-haspopup': true,\n  color: 'secondary'\n};\nDropdownToggle.contextTypes = {\n  isOpen: propTypes.bool.isRequired,\n  toggle: propTypes.func.isRequired\n};\n\nvar EdgeHeader = function EdgeHeader(props) {\n  var color = props.color,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"color\", \"className\", \"tag\"]);\n\n  var classes = classNames(\"edge-header\", color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"edgeHeader\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nEdgeHeader.propTypes = {\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nEdgeHeader.defaultProps = {\n  color: \"deep-purple\",\n  tag: \"div\"\n};\n\nvar Footer = function Footer(props) {\n  var color = props.color,\n      children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"color\", \"children\", \"className\", \"tag\"]);\n\n  var classes = classNames(\"page-footer\", color && color, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"footer\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nFooter.propTypes = {\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nFooter.defaultProps = {\n  tag: \"footer\"\n};\n\nvar FormInline = function FormInline(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    // Get Cursor Position\n    var cursorPos = {\n      top: e.clientY,\n      left: e.clientX,\n      time: Date.now()\n    };\n    setCursorPos(cursorPos);\n  };\n\n  var className = props.className,\n      waves = props.waves,\n      children = props.children,\n      attributes = _objectWithoutProperties(props, [\"className\", \"waves\", \"children\"]);\n\n  var classes = classNames('form-inline', props.waves && 'Ripple-parent', className);\n  return React.createElement(\"form\", _extends({\n    \"data-test\": \"form-inline\"\n  }, attributes, {\n    className: classes,\n    onMouseDown: handleClick,\n    onTouchStart: handleClick\n  }), props.children, props.waves && React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nFormInline.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  waves: propTypes.bool\n};\n\nvar FreeBird = function FreeBird(props) {\n  var className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\"]);\n\n  var classes = classNames(\"container free-bird\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"freebird\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nFreeBird.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string\n};\nFreeBird.defaultProps = {\n  tag: \"div\"\n};\nvar css$6 = \".hamburger-button__checkbox {\\n  display: none;\\n}\\n\\n.hamburger-button__button {\\n  background-color: transparent;\\n  height: 100%;\\n  width: 100%;\\n  text-align: center;\\n  cursor: pointer;\\n  top: -5px;\\n}\\n\\nlabel.hamburger-button__button {\\n  margin-bottom: 0;\\n}\\n\\n#nav-icon1 {\\n  width: 1.5em;\\n  height: 1.5em;\\n  position: relative;\\n  -webkit-transform: rotate(0deg);\\n  -moz-transform: rotate(0deg);\\n  -o-transform: rotate(0deg);\\n  transform: rotate(0deg);\\n  -webkit-transition: .5s ease-in-out;\\n  -moz-transition: .5s ease-in-out;\\n  -o-transition: .5s ease-in-out;\\n  transition: .5s ease-in-out;\\n  cursor: pointer;\\n}\\n\\n#nav-icon1 span {\\n  display: block;\\n  position: absolute;\\n  height: 3px;\\n  width: 100%;\\n  border-radius: 1px;\\n  background-color: #fff;\\n  opacity: 1;\\n  left: 0;\\n  -webkit-transform: rotate(0deg);\\n  -moz-transform: rotate(0deg);\\n  -o-transform: rotate(0deg);\\n  transform: rotate(0deg);\\n  -webkit-transition: .25s ease-in-out;\\n  -moz-transition: .25s ease-in-out;\\n  -o-transition: .25s ease-in-out;\\n  transition: .25s ease-in-out;\\n}\\n\\n#nav-icon1 span:nth-child(1) {\\n  top: 5px;\\n}\\n\\n#nav-icon1 span:nth-child(2) {\\n  top: 16px;\\n}\\n\\n#nav-icon1 span:nth-child(3) {\\n  top: 27px;\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(1) {\\n  top: 16px;\\n  -webkit-transform: rotate(135deg);\\n  -moz-transform: rotate(135deg);\\n  -o-transform: rotate(135deg);\\n  transform: rotate(135deg);\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(2) {\\n  opacity: 0;\\n  left: -60px;\\n}\\n\\n.hamburger-button__checkbox:checked+#nav-icon1 span:nth-child(3) {\\n  top: 16px;\\n  -webkit-transform: rotate(-135deg);\\n  -moz-transform: rotate(-135deg);\\n  -o-transform: rotate(-135deg);\\n  transform: rotate(-135deg);\\n}\\n\";\nstyleInject(css$6);\n\nvar HamburgerToggler = function HamburgerToggler(props) {\n  var id = props.id,\n      color = props.color,\n      className = props.className,\n      isOpen = props.isOpen,\n      onClick = props.onClick;\n  var classes = classNames('hamburger-button__button', className);\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    \"data-test\": \"hamburger-toggler\",\n    type: \"checkbox\",\n    defaultChecked: isOpen || false,\n    onChange: onClick,\n    className: \"hamburger-button__checkbox\",\n    id: id\n  }), React.createElement(\"label\", {\n    id: \"nav-icon1\",\n    className: classes,\n    htmlFor: id\n  }, React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  }), React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  }), React.createElement(\"span\", {\n    style: {\n      background: color\n    }\n  })));\n};\n\nHamburgerToggler.propTypes = {\n  id: propTypes.string,\n  color: propTypes.string,\n  className: propTypes.string\n};\n\nvar Iframe =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Iframe, _Component);\n\n  function Iframe() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Iframe);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Iframe)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: '',\n      height: '',\n      ratio: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var width = _this.props.width;\n      var height = _this.props.height;\n      var ratio = 9 / 16;\n\n      if (_this.props.ratio) {\n        var newRatio = _this.props.ratio.split('by')[0] / _this.props.ratio.split('by')[1];\n\n        if (typeof ratio === 'number') ratio = newRatio;\n      }\n\n      if (_this.props.width && _this.props.height) {\n        return;\n      } else if (_this.props.width) {\n        height = _this.props.width * ratio;\n      } else if (_this.props.height) {\n        width = _this.props.height * (1 / ratio);\n      }\n\n      _this.setState(_objectSpread({}, _this.state, {\n        width: width,\n        height: height,\n        ratio: ratio\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Iframe, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          allowFullScreen = _this$props.allowFullScreen,\n          className = _this$props.className,\n          id = _this$props.id,\n          name = _this$props.name,\n          onMouseOver = _this$props.onMouseOver,\n          onMouseOut = _this$props.onMouseOut,\n          onLoad = _this$props.onLoad,\n          sandbox = _this$props.sandbox,\n          src = _this$props.src,\n          style = _this$props.style,\n          _this$props$title = _this$props.title,\n          title = _this$props$title === void 0 ? \"\" : _this$props$title,\n          ratio = _this$props.ratio,\n          height = _this$props.height,\n          width = _this$props.width;\n      var classes = classNames('embed-responsive-item', className);\n      var wrapperClasses = classNames(!(height || width) && 'embed-responsive', ratio ? \"embed-responsive-\".concat(ratio) : \"embed-responsive-16by9\");\n      var iframeAttributes = {\n        src: src,\n        id: id || false,\n        frameBorder: '0',\n        target: '_parent',\n        allowFullScreen: allowFullScreen || true,\n        height: this.state.height || '100%',\n        name: name || undefined,\n        width: this.state.width || '100%',\n        onLoad: onLoad || undefined,\n        onMouseOver: onMouseOver || undefined,\n        onMouseOut: onMouseOut || undefined,\n        sandbox: sandbox || undefined,\n        style: style || undefined\n      };\n      iframeAttributes = returnAttributes(iframeAttributes);\n      return React.createElement(\"div\", {\n        \"data-test\": \"iframe\",\n        className: wrapperClasses\n      }, React.createElement(\"iframe\", _extends({\n        title: title,\n        className: classes\n      }, iframeAttributes)));\n    }\n  }]);\n\n  return Iframe;\n}(Component);\n\nIframe.propTypes = {\n  allowFullScreen: propTypes.bool,\n  className: propTypes.string,\n  height: propTypes.number,\n  id: propTypes.string,\n  name: propTypes.string,\n  onMouseOver: propTypes.func,\n  onMouseOut: propTypes.func,\n  onLoad: propTypes.func,\n  ratio: propTypes.string,\n  sandbox: propTypes.string,\n  src: propTypes.string.isRequired,\n  styles: propTypes.object,\n  width: propTypes.number,\n  title: propTypes.string\n};\n\nvar Input =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Input, _React$Component);\n\n  function Input(props) {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isFocused: false\n      });\n\n      _this.props.onBlur && _this.props.onBlur(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      event.stopPropagation();\n\n      _this.setState({\n        isFocused: true\n      });\n\n      _this.props.onFocus && _this.props.onFocus(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      event.stopPropagation();\n\n      if (_this.props.type !== \"checkbox\" && _this.props.type !== \"radio\") {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      _this.props.onChange && _this.props.onChange(event);\n      _this.props.getValue && _this.props.getValue(event.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInput\", function (event) {\n      event.stopPropagation();\n\n      if (_this.props.type !== \"checkbox\" && _this.props.type !== \"radio\") {\n        _this.setState({\n          innerValue: event.target.value,\n          isPristine: false\n        });\n      }\n\n      _this.props.onInput && _this.props.onInput(event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFocus\", function () {\n      _this.inputElementRef.current.focus();\n    });\n\n    _this.state = {\n      innerValue: props.value || props.valueDefault,\n      isFocused: false,\n      isPristine: true\n    };\n    _this.inputElementRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // User wants to access the input ref, but we have to use it intenrally to.\n      // Return Ref instance to share ref with parent\n      // then user sets ref as a callback -> inputRef={ref => this.myInputRef = ref}\n      this.props.inputRef && this.props.inputRef(this.inputElementRef.current);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          background = _this$props.background,\n          children = _this$props.children,\n          className = _this$props.className,\n          containerClass = _this$props.containerClass,\n          disabled = _this$props.disabled,\n          error = _this$props.error,\n          filled = _this$props.filled,\n          gap = _this$props.gap,\n          getValue = _this$props.getValue,\n          group = _this$props.group,\n          hint = _this$props.hint,\n          icon = _this$props.icon,\n          iconBrand = _this$props.iconBrand,\n          iconClass = _this$props.iconClass,\n          iconLight = _this$props.iconLight,\n          onIconClick = _this$props.onIconClick,\n          onIconMouseEnter = _this$props.onIconMouseEnter,\n          onIconMouseLeave = _this$props.onIconMouseLeave,\n          iconRegular = _this$props.iconRegular,\n          iconSize = _this$props.iconSize,\n          id = _this$props.id,\n          inputRef = _this$props.inputRef,\n          noTag = _this$props.noTag,\n          outline = _this$props.outline,\n          label = _this$props.label,\n          labelClass = _this$props.labelClass,\n          size = _this$props.size,\n          success = _this$props.success,\n          Tag = _this$props.tag,\n          type = _this$props.type,\n          validate = _this$props.validate,\n          value = _this$props.value,\n          valueDefault = _this$props.valueDefault,\n          attributes = _objectWithoutProperties(_this$props, [\"background\", \"children\", \"className\", \"containerClass\", \"disabled\", \"error\", \"filled\", \"gap\", \"getValue\", \"group\", \"hint\", \"icon\", \"iconBrand\", \"iconClass\", \"iconLight\", \"onIconClick\", \"onIconMouseEnter\", \"onIconMouseLeave\", \"iconRegular\", \"iconSize\", \"id\", \"inputRef\", \"noTag\", \"outline\", \"label\", \"labelClass\", \"size\", \"success\", \"tag\", \"type\", \"validate\", \"value\", \"valueDefault\"]);\n\n      var isNotEmpty = (!!this.state.innerValue || !!hint || this.state.isFocused || this.state.innerValue === 0) && type !== \"checkbox\" && type !== \"radio\";\n      var TagInput = \"\";\n      var formControlClass = \"\";\n\n      if (type === \"textarea\") {\n        formControlClass = outline ? \"form-control\" : \"md-textarea form-control\";\n        TagInput = \"textarea\";\n      } else {\n        formControlClass = \"form-control\";\n        TagInput = \"input\";\n        attributes.type = type;\n      }\n\n      attributes.disabled = disabled;\n      var classes = classNames(formControlClass, size ? \"form-control-\".concat(size) : false, validate ? \"validate\" : false, filled ? \"filled-in\" : false, gap ? \"with-gap\" : false, type === \"checkbox\" ? gap ? false : \"form-check-input\" : false, type === \"radio\" ? \"form-check-input\" : false, className);\n      var containerClassFix = classNames(type === \"checkbox\" || type === \"radio\" ? typeof label === \"boolean\" && label ? \"d-flex\" : \"form-check\" : \"md-form\", group ? \"form-group\" : false, size ? \"form-\".concat(size) : false, outline && \"md-outline\", background && \"md-bg\", containerClass);\n      var iconClassFix = classNames(isNotEmpty && this.state.isFocused ? \"active\" : false, iconClass, \"prefix\");\n      var labelClassFix = classNames(isNotEmpty ? \"active\" : false, disabled ? \"disabled\" : false, type === \"checkbox\" ? typeof label === \"boolean\" && label ? \"form-check-label\" : \"form-check-label mr-5\" : false, type === \"radio\" ? typeof label === \"boolean\" && label ? \"form-check-label\" : \"form-check-label mr-5\" : false, labelClass);\n\n      var renderFunction = function renderFunction() {\n        return React.createElement(React.Fragment, null, icon && React.createElement(Fa, {\n          icon: icon,\n          size: iconSize,\n          brand: iconBrand,\n          light: iconLight,\n          regular: iconRegular,\n          className: iconClassFix,\n          onClick: onIconClick ? onIconClick : _this2.setFocus,\n          onMouseEnter: onIconMouseEnter,\n          onMouseLeave: onIconMouseLeave\n        }), React.createElement(TagInput, _extends({\n          \"data-test\": \"input\"\n        }, attributes, {\n          className: classes,\n          id: id,\n          placeholder: hint,\n          ref: _this2.inputElementRef,\n          value: _this2.state.innerValue,\n          onBlur: _this2.onBlur,\n          onChange: _this2.onChange,\n          onInput: _this2.onInput,\n          onFocus: _this2.onFocus\n        })), label && React.createElement(\"label\", {\n          className: labelClassFix,\n          htmlFor: id,\n          \"data-error\": error,\n          \"data-success\": success,\n          id: id,\n          onClick: _this2.setFocus\n        }, label), children);\n      };\n\n      return noTag ? renderFunction() : React.createElement(Tag, {\n        className: containerClassFix\n      }, renderFunction());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.value !== prevState.value) {\n        return {\n          innerValue: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Input;\n}(React.Component);\n\nInput.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node,\n  containerClass: propTypes.string,\n  disabled: propTypes.bool,\n  error: propTypes.string,\n  filled: propTypes.bool,\n  gap: propTypes.bool,\n  getValue: propTypes.func,\n  group: propTypes.bool,\n  hint: propTypes.string,\n  icon: propTypes.string,\n  iconBrand: propTypes.bool,\n  iconClass: propTypes.string,\n  iconLight: propTypes.bool,\n  onIconClick: propTypes.func,\n  onIconMouseEnter: propTypes.func,\n  onIconMouseLeave: propTypes.func,\n  iconRegular: propTypes.bool,\n  iconSize: propTypes.string,\n  id: propTypes.string,\n  inputRef: propTypes.oneOfType([propTypes.object, propTypes.func]),\n  label: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.object, propTypes.bool]),\n  labelClass: propTypes.string,\n  noTag: propTypes.bool,\n  onBlur: propTypes.func,\n  onChange: propTypes.func,\n  onFocus: propTypes.func,\n  onInput: propTypes.func,\n  outline: propTypes.bool,\n  size: propTypes.string,\n  success: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  type: propTypes.string,\n  validate: propTypes.bool,\n  value: propTypes.oneOfType([propTypes.number, propTypes.string]),\n  valueDefault: propTypes.oneOfType([propTypes.number, propTypes.string])\n};\nInput.defaultProps = {\n  className: \"\",\n  containerClass: \"\",\n  disabled: false,\n  error: \"\",\n  filled: false,\n  gap: false,\n  group: false,\n  hint: undefined,\n  icon: \"\",\n  iconBrand: false,\n  iconClass: \"\",\n  iconLight: false,\n  onIconMouseEnter: function onIconMouseEnter() {},\n  onIconMouseLeave: function onIconMouseLeave() {},\n  iconRegular: false,\n  iconSize: undefined,\n  id: undefined,\n  noTag: false,\n  outline: false,\n  label: \"\",\n  labelClass: \"\",\n  size: \"\",\n  success: \"\",\n  tag: \"div\",\n  type: \"text\",\n  validate: false,\n  valueDefault: \"\"\n};\n\nvar InputGroup = function InputGroup(_ref) {\n  var append = _ref.append,\n      appendClassName = _ref.appendClassName,\n      ariaLabel = _ref.ariaLabel,\n      children = _ref.children,\n      className = _ref.className,\n      containerClassName = _ref.containerClassName,\n      containerId = _ref.containerId,\n      hint = _ref.hint,\n      id = _ref.id,\n      inputs = _ref.inputs,\n      inputTag = _ref.inputTag,\n      label = _ref.label,\n      labelClassName = _ref.labelClassName,\n      material = _ref.material,\n      prepend = _ref.prepend,\n      prependClassName = _ref.prependClassName,\n      size = _ref.size,\n      Tag = _ref.tag,\n      textClassName = _ref.textClassName,\n      type = _ref.type,\n      value = _ref.value,\n      valueDefault = _ref.valueDefault,\n      getValue = _ref.getValue,\n      onChange = _ref.onChange,\n      attributes = _objectWithoutProperties(_ref, [\"append\", \"appendClassName\", \"ariaLabel\", \"children\", \"className\", \"containerClassName\", \"containerId\", \"hint\", \"id\", \"inputs\", \"inputTag\", \"label\", \"labelClassName\", \"material\", \"prepend\", \"prependClassName\", \"size\", \"tag\", \"textClassName\", \"type\", \"value\", \"valueDefault\", \"getValue\", \"onChange\"]);\n\n  var containerClassNames = classNames('input-group', material && 'md-form', size && \"input-group-\".concat(size), containerClassName);\n  var inputClassNames = classNames(className);\n  var prependClassNames = classNames('input-group-prepend', prependClassName);\n  var appendClassNames = classNames('input-group-append', appendClassName);\n  var textClassNames = classNames('input-group-text', material && 'md-addon', textClassName);\n\n  var handleChange = function handleChange(event) {\n    event.persist();\n    onChange && onChange(event);\n    getValue && getValue(event.target.value);\n  };\n\n  return React.createElement(React.Fragment, null, label && React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClassName\n  }, label), React.createElement(Tag, _extends({\n    \"data-test\": \"input-group\"\n  }, attributes, {\n    className: containerClassNames,\n    id: containerId\n  }), prepend && React.createElement(\"div\", {\n    className: prependClassNames\n  }, typeof prepend === 'string' ? React.createElement(\"span\", {\n    className: textClassNames\n  }, prepend) : prepend), inputs || React.createElement(Input, {\n    noTag: true,\n    type: type,\n    className: inputClassNames,\n    id: id,\n    value: value,\n    valueDefault: valueDefault,\n    hint: hint,\n    \"aria-label\": ariaLabel,\n    onChange: handleChange\n  }), append && React.createElement(\"div\", {\n    className: appendClassNames\n  }, typeof append === 'string' ? React.createElement(\"span\", {\n    className: textClassNames\n  }, append) : append), children));\n};\n\nInputGroup.propTypes = {\n  append: propTypes.oneOfType([propTypes.node, propTypes.string]),\n  appendClassNames: propTypes.string,\n  ariaLabel: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  containerClassName: propTypes.string,\n  containerId: propTypes.string,\n  hint: propTypes.string,\n  id: propTypes.string,\n  inputs: propTypes.node,\n  label: propTypes.string,\n  labelClassName: propTypes.string,\n  material: propTypes.bool,\n  prepend: propTypes.any,\n  prependClassName: propTypes.string,\n  size: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  textClassName: propTypes.string,\n  type: propTypes.string,\n  value: propTypes.string,\n  valueDefault: propTypes.string,\n  getValue: propTypes.func,\n  onChange: propTypes.func\n};\nInputGroup.defaultProps = {\n  tag: 'div',\n  type: 'text'\n};\n\nvar InputNumeric = function InputNumeric(props) {\n  var onChangeHandler = function onChangeHandler(value) {\n    props.getValue && props.getValue(value);\n  };\n\n  var className = props.className,\n      getValue = props.getValue,\n      attributes = _objectWithoutProperties(props, [\"className\", \"getValue\"]);\n\n  var classes = classNames('form-control', className);\n  return React.createElement(NumericInput, _extends({\n    \"data-test\": \"input-numeric\"\n  }, attributes, {\n    onChange: onChangeHandler,\n    className: classes\n  }));\n};\n\nInputNumeric.propTypes = {\n  className: propTypes.string,\n  getValue: propTypes.func\n};\n\nvar Jumbotron = function Jumbotron(props) {\n  var className = props.className,\n      children = props.children,\n      fluid = props.fluid,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"fluid\"]);\n\n  var classes = classNames('jumbotron', fluid ? 'jumbotron-fluid' : false, className);\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"jumbotron\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nJumbotron.propTypes = {\n  fluid: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string\n};\n\nvar ListGroup = function ListGroup(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\"]);\n\n  var classes = classNames(\"list-group\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"list-group\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nListGroup.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node\n};\nListGroup.defaultProps = {\n  tag: \"ul\"\n};\n\nvar ListGroupItem = function ListGroupItem(props) {\n  var _classNames;\n\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      disabled = props.disabled,\n      hover = props.hover,\n      success = props.success,\n      info = props.info,\n      warning = props.warning,\n      danger = props.danger,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"active\", \"children\", \"className\", \"color\", \"disabled\", \"hover\", \"success\", \"info\", \"warning\", \"danger\", \"tag\"]);\n\n  var classes = classNames('list-group-item', className, (_classNames = {\n    active: active,\n    disabled: disabled\n  }, _defineProperty(_classNames, \"list-group-item-\".concat(color), ' color'), _defineProperty(_classNames, 'list-group-item-action', hover), _classNames));\n\n  if (attributes.href && Tag === 'li') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"list-group-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nListGroupItem.propTypes = {\n  active: propTypes.bool,\n  disabled: propTypes.bool,\n  hover: propTypes.bool,\n  success: propTypes.bool,\n  info: propTypes.bool,\n  warning: propTypes.bool,\n  danger: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  color: propTypes.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'])\n};\nListGroupItem.defaultProps = {\n  tag: 'li'\n};\n\nvar Media = function Media(props) {\n  var body = props.body,\n      bottom = props.bottom,\n      className = props.className,\n      heading = props.heading,\n      left = props.left,\n      list = props.list,\n      middle = props.middle,\n      object = props.object,\n      right = props.right,\n      round = props.round,\n      thumbnail = props.thumbnail,\n      figure = props.figure,\n      figImg = props.figImg,\n      figCap = props.figCap,\n      figCapRight = props.figCapRight,\n      figCapLeft = props.figCapLeft,\n      tag = props.tag,\n      top = props.top,\n      attributes = _objectWithoutProperties(props, [\"body\", \"bottom\", \"className\", \"heading\", \"left\", \"list\", \"middle\", \"object\", \"right\", \"round\", \"thumbnail\", \"figure\", \"figImg\", \"figCap\", \"figCapRight\", \"figCapLeft\", \"tag\", \"top\"]);\n\n  var defaultTag;\n\n  if (heading) {\n    defaultTag = \"h4\";\n  } else if (left || right) {\n    defaultTag = \"a\";\n  } else if (object || figImg) {\n    defaultTag = \"img\";\n  } else if (list) {\n    defaultTag = \"ul\";\n  } else if (figure) {\n    defaultTag = \"figure\";\n  } else if (figCap || figCapRight || figCapLeft) {\n    defaultTag = \"figcaption\";\n  } else {\n    defaultTag = \"div\";\n  }\n\n  var Tag = tag || defaultTag;\n  var classes = classNames({\n    \"media-body\": body,\n    \"mt-0\": heading,\n    \"media-left\": left,\n    \"media-right\": right,\n    \"align-self-start\": top,\n    \"align-self-center\": middle,\n    \"align-self-end\": bottom,\n    \"media-object\": object,\n    \"img-thumbnail\": thumbnail,\n    \"media-list\": list,\n    figure: figure,\n    \"figure-img\": figImg,\n    \"figure-caption text-center\": figCap,\n    \"figure-caption text-right\": figCapRight,\n    \"figure-caption text-left\": figCapLeft,\n    \"rounded-circle z-depth-1-half\": round\n  }, !body && !heading && !left && !right && !top && !bottom && !middle && !object && !list && !figCap && !figCapRight && !figCapRight && !figImg && !figure ? \"media\" : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"media\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nMedia.propTypes = {\n  body: propTypes.bool,\n  bottom: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  heading: propTypes.bool,\n  figure: propTypes.bool,\n  figImg: propTypes.bool,\n  figCap: propTypes.bool,\n  figCapRight: propTypes.bool,\n  figCapLeft: propTypes.bool,\n  left: propTypes.bool,\n  list: propTypes.bool,\n  middle: propTypes.bool,\n  object: propTypes.bool,\n  thumbnail: propTypes.bool,\n  round: propTypes.bool,\n  right: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  top: propTypes.bool\n};\n\nvar Modal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Modal, _Component);\n\n  function Modal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isOpen: _this.props.isOpen || false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"modalContent\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      document.body.classList.add('modal-open');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      document.body.classList.remove('modal-open');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidUpdate\", function (prevProps, prevState) {\n      if (prevState.isOpen !== _this.props.isOpen) {\n        _this.setState({\n          isOpen: _this.props.isOpen\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnEntered\", function (type, node) {\n      if (type === 'backdrop' && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.add('show');\n      _this.props.autoFocus && node.focus();\n\n      if (type === 'modal') {\n        _this.props.showModal && _this.props.showModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExit\", function (type, node) {\n      if (type === 'backdrop' && _this.props.fade === false) {\n        return;\n      }\n\n      node.classList.remove('show');\n\n      if (type === 'modal') {\n        _this.props.hideModal && _this.props.hideModal();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOnExited\", function (node) {\n      _this.props.hiddenModal && _this.props.hiddenModal();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBackdropClick\", function (e) {\n      if (!_this.props.backdrop || e.target.closest('[role=\"dialog\"]') && !e.target.classList.contains('modal')) return;\n\n      if (!_this.modalContent.contains(e.target)) {\n        _this.props.toggle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEscape\", function (e) {\n      if (e.keyCode === 27) {\n        e.preventDefault();\n\n        _this.props.toggle();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          backdrop = _this$props.backdrop,\n          backdropClassName = _this$props.backdropClassName,\n          contentClassName = _this$props.contentClassName,\n          className = _this$props.className,\n          size = _this$props.size,\n          side = _this$props.side,\n          fullHeight = _this$props.fullHeight,\n          frame = _this$props.frame,\n          centered = _this$props.centered,\n          position = _this$props.position,\n          cascading = _this$props.cascading,\n          modalStyle = _this$props.modalStyle,\n          wrapClassName = _this$props.wrapClassName,\n          animation = _this$props.animation,\n          fade = _this$props.fade,\n          tabIndex = _this$props.tabIndex,\n          role = _this$props.role,\n          id = _this$props.id,\n          inline = _this$props.inline;\n      var timeout = fade ? 300 : 0;\n      var modalDialogClasses = classNames((_classNames = {\n        'cascading-modal': cascading,\n        'modal-side': side,\n        'modal-full-height': fullHeight,\n        'modal-frame': frame,\n        'modal-dialog-centered': centered\n      }, _defineProperty(_classNames, \"modal-\".concat(size), size), _defineProperty(_classNames, \"modal-\".concat(position), position), _defineProperty(_classNames, \"modal-notify white-text modal-\".concat(modalStyle), modalStyle), _classNames), 'modal-dialog', className);\n      var wrapperClasses = classNames(_defineProperty({\n        modal: !inline,\n        fade: fade,\n        top: fade && !animation && !position\n      }, \"\".concat(animation), fade && animation), fade && position && position.split('-')[1], wrapClassName);\n      var backdropClasses = classNames('modal-backdrop', fade ? 'fade' : 'show', backdropClassName);\n      var contentClasses = classNames('modal-content', contentClassName);\n      var modalAttributes = returnAttributes({\n        style: {\n          display: 'block'\n        },\n        id: id,\n        tabIndex: tabIndex,\n        role: role,\n        'aria-hidden': 'true'\n      });\n      return React.createElement(Fragment, null, backdrop && React.createElement(Transition, {\n        timeout: timeout,\n        \"in\": this.state.isOpen,\n        appear: this.state.isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered('backdrop', node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit('backdrop', node);\n        },\n        onExited: this.handleOnExited\n      }, React.createElement(\"div\", {\n        className: backdropClasses\n      })), React.createElement(Transition, {\n        timeout: timeout,\n        \"in\": this.state.isOpen,\n        appear: this.state.isOpen,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        onMouseDown: this.handleBackdropClick,\n        onEntered: function onEntered(node) {\n          return _this2.handleOnEntered('modal', node);\n        },\n        onExit: function onExit(node) {\n          return _this2.handleOnExit('modal', node);\n        }\n      }, React.createElement(\"div\", _extends({\n        \"data-test\": \"modal\",\n        onKeyUp: this.handleEscape,\n        className: wrapperClasses\n      }, modalAttributes), React.createElement(\"div\", {\n        className: modalDialogClasses,\n        role: \"document\"\n      }, React.createElement(\"div\", {\n        ref: function ref(elem) {\n          return _this2.modalContent = elem;\n        },\n        className: contentClasses\n      }, children)))));\n    }\n  }]);\n\n  return Modal;\n}(Component);\n\nModal.defaultProps = {\n  autoFocus: true,\n  backdrop: true,\n  backdropTransitionTimeout: 150,\n  fade: true,\n  isOpen: false,\n  modalTransitionTimeout: 300,\n  role: 'dialog',\n  tabIndex: '-1',\n  zIndex: 1050\n};\nModal.propTypes = {\n  animation: propTypes.string,\n  backdrop: propTypes.bool,\n  backdropClassName: propTypes.string,\n  cascading: propTypes.bool,\n  centered: propTypes.bool,\n  children: propTypes.node,\n  className: propTypes.string,\n  contentClassName: propTypes.string,\n  fade: propTypes.bool,\n  frame: propTypes.bool,\n  fullHeight: propTypes.bool,\n  hiddenModal: propTypes.func,\n  hideModal: propTypes.func,\n  id: propTypes.string,\n  modalClassName: propTypes.string,\n  modalStyle: propTypes.string,\n  position: propTypes.string,\n  role: propTypes.string,\n  size: propTypes.string,\n  side: propTypes.bool,\n  showModal: propTypes.func,\n  tabIndex: propTypes.string,\n  wrapClassName: propTypes.string\n};\n\nvar ModalBody = function ModalBody(props) {\n  var className = props.className,\n      children = props.children,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\"]);\n\n  var classes = classNames('modal-body', className);\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-body\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nModalBody.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node\n};\n\nvar ModalFooter = function ModalFooter(props) {\n  var className = props.className,\n      children = props.children,\n      center = props.center,\n      start = props.start,\n      end = props.end,\n      around = props.around,\n      between = props.between,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"center\", \"start\", \"end\", \"around\", \"between\"]);\n\n  var classes = classNames('modal-footer', className, {\n    'justify-content-start': start,\n    'justify-content-end': end,\n    'justify-content-center': center,\n    'justify-content-between': between,\n    'justify-content-around': around\n  });\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-footer\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nModalFooter.propTypes = {\n  className: propTypes.string,\n  children: propTypes.node\n};\n\nvar ModalHeader = function ModalHeader(props) {\n  var closeButton;\n\n  var className = props.className,\n      children = props.children,\n      toggle = props.toggle,\n      Tag = props.tag,\n      closeAriaLabel = props.closeAriaLabel,\n      titleClass = props.titleClass,\n      attributes = _objectWithoutProperties(props, [\"className\", \"children\", \"toggle\", \"tag\", \"closeAriaLabel\", \"titleClass\"]);\n\n  var classes = classNames('modal-header', className);\n  var titleClasses = classNames('modal-title', titleClass);\n\n  if (toggle) {\n    closeButton = React.createElement(\"button\", {\n      type: \"button\",\n      onClick: toggle,\n      className: \"close\",\n      \"aria-label\": closeAriaLabel\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, String.fromCharCode(215)));\n  }\n\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"modal-header\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(Tag, {\n    className: titleClasses\n  }, children), closeButton);\n};\n\nModalHeader.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  toggle: propTypes.func,\n  className: propTypes.string,\n  children: propTypes.node,\n  closeAriaLabel: propTypes.string\n};\nModalHeader.defaultProps = {\n  tag: 'h4',\n  closeAriaLabel: 'Close'\n};\n\nvar Nav = function Nav(props) {\n  var children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      tabs = props.tabs,\n      color = props.color,\n      classicTabs = props.classicTabs,\n      pills = props.pills,\n      header = props.header,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"tag\", \"tabs\", \"color\", \"classicTabs\", \"pills\", \"header\"]);\n\n  var classes = classNames('nav', tabs && 'md-tabs', pills && 'md-pills', header && 'nav-pills card-header-pills', color && !tabs && !classicTabs && !pills ? color : false, pills && color ? 'pills-' + color : false, (tabs || classicTabs) && color ? 'tabs-' + color : false, className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"nav\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nNav.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  color: propTypes.string,\n  classicTabs: propTypes.bool,\n  pills: propTypes.bool,\n  tabs: propTypes.bool,\n  header: propTypes.bool\n};\nNav.defaultProps = {\n  tag: 'ul',\n  classicTabs: false,\n  pills: false,\n  tabs: false,\n  header: false\n};\n\nvar getExpandClass = function getExpandClass(expand) {\n  if (expand === false) {\n    return false;\n  } else if (expand === true || expand === 'xs') {\n    return 'navbar-expand';\n  }\n\n  return \"navbar-expand-\".concat(expand);\n};\n\nvar Navbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Navbar, _Component);\n\n  function Navbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Navbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Navbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isCollapsed: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function () {\n      var scrollingNavbarOffset = _this.props.scrollingNavbarOffset || 50;\n\n      if (window.pageYOffset > scrollingNavbarOffset) {\n        _this.setState({\n          isCollapsed: true\n        });\n      } else {\n        _this.setState({\n          isCollapsed: false\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Navbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.scrolling || this.props.scrollingNavbarOffset) {\n        window.addEventListener('scroll', this.handleScroll);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.scrolling || this.props.scrollingNavbarOffset) {\n        window.removeEventListener('scroll', this.handleScroll);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props = this.props,\n          expand = _this$props.expand,\n          light = _this$props.light,\n          dark = _this$props.dark,\n          sticky = _this$props.sticky,\n          fixed = _this$props.fixed,\n          scrolling = _this$props.scrolling,\n          color = _this$props.color,\n          className = _this$props.className,\n          scrollingNavbarOffset = _this$props.scrollingNavbarOffset,\n          Tag = _this$props.tag,\n          _double = _this$props[\"double\"],\n          transparent = _this$props.transparent,\n          attributes = _objectWithoutProperties(_this$props, [\"expand\", \"light\", \"dark\", \"sticky\", \"fixed\", \"scrolling\", \"color\", \"className\", \"scrollingNavbarOffset\", \"tag\", \"double\", \"transparent\"]);\n\n      var classes = classNames((_classNames = {\n        'navbar-light': light,\n        'navbar-dark': dark\n      }, _defineProperty(_classNames, \"sticky-\".concat(sticky), sticky), _defineProperty(_classNames, \"fixed-\".concat(fixed), fixed), _defineProperty(_classNames, 'scrolling-navbar', scrolling || scrollingNavbarOffset), _defineProperty(_classNames, 'double-nav', _double), _defineProperty(_classNames, 'top-nav-collapse', this.state.isCollapsed), _defineProperty(_classNames, \"\".concat(color), color && transparent ? this.state.isCollapsed : color), _classNames), 'navbar', getExpandClass(expand), className);\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"navbar\"\n      }, attributes, {\n        className: classes,\n        role: \"navigation\"\n      }));\n    }\n  }]);\n\n  return Navbar;\n}(Component);\n\nNavbar.propTypes = {\n  light: propTypes.bool,\n  dark: propTypes.bool,\n  \"double\": propTypes.bool,\n  fixed: propTypes.string,\n  sticky: propTypes.string,\n  scrolling: propTypes.bool,\n  scrollingNavbarOffset: propTypes.number,\n  color: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  expand: propTypes.oneOfType([propTypes.bool, propTypes.string]),\n  transparent: propTypes.bool\n};\nNavbar.defaultProps = {\n  tag: 'nav',\n  expand: false,\n  scrolling: false\n};\n\nvar NavbarBrand = function NavbarBrand(_ref) {\n  var className = _ref.className,\n      href = _ref.href,\n      attributes = _objectWithoutProperties(_ref, [\"className\", \"href\"]);\n\n  var classes = classNames('navbar-brand', className);\n\n  var navbarBrand = function navbarBrand() {\n    if (href) {\n      return React.createElement(NavLink$1, _extends({\n        \"data-test\": \"navbar-brand\",\n        to: href\n      }, attributes, {\n        className: classes\n      }));\n    } else {\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"navbar-brand\"\n      }, attributes, {\n        className: classes\n      }));\n    }\n  };\n\n  return navbarBrand();\n};\n\nNavbarBrand.propTypes = {\n  className: propTypes.string,\n  href: propTypes.string\n};\n\nvar NavbarNav = function NavbarNav(props) {\n  var children = props.children,\n      className = props.className,\n      right = props.right,\n      left = props.left,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"right\", \"left\", \"tag\"]);\n\n  var classes = classNames('navbar-nav', right ? 'ml-auto' : left ? 'mr-auto' : 'justify-content-around w-100', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"navbar-nav\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nNavbarNav.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  right: propTypes.bool,\n  left: propTypes.bool\n};\nNavbarNav.defaultProps = {\n  tag: 'ul'\n};\n\nvar NavbarToggler = function NavbarToggler(props) {\n  var right = props.right,\n      left = props.left,\n      children = props.children,\n      className = props.className,\n      Tag = props.tag,\n      image = props.image,\n      attributes = _objectWithoutProperties(props, [\"right\", \"left\", \"children\", \"className\", \"tag\", \"image\"]);\n\n  var classes = classNames({\n    \"navbar-toggler-right\": right,\n    \"navbar-toggler-left\": left\n  }, \"navbar-toggler\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"navbar-toggler\"\n  }, attributes, {\n    className: classes\n  }), children ? children : image ? React.createElement(\"span\", {\n    className: \"navbar-toggler-icon\",\n    style: {\n      backgroundImage: \"url(\\\"\".concat(image, \"\\\")\")\n    }\n  }) : React.createElement(\"span\", {\n    className: \"navbar-toggler-icon\"\n  }));\n};\n\nNavbarToggler.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  type: propTypes.string,\n  className: propTypes.string,\n  children: propTypes.node,\n  right: propTypes.bool,\n  left: propTypes.bool,\n  image: propTypes.string\n};\nNavbarToggler.defaultProps = {\n  tag: \"button\",\n  type: \"button\"\n};\n\nvar NavItem = function NavItem(props) {\n  var children = props.children,\n      className = props.className,\n      active = props.active,\n      text = props.text,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"active\", \"text\", \"tag\"]);\n\n  var classes = classNames('nav-item', active && 'active', text && 'navbar-text', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"nav-item\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nNavItem.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  children: propTypes.node,\n  active: propTypes.bool\n};\nNavItem.defaultProps = {\n  tag: 'li'\n};\n\nvar NavLink = function NavLink(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cursorPos = _useState2[0],\n      setCursorPos = _useState2[1];\n\n  var handleClick = function handleClick(e) {\n    if (!props.disabled) {\n      e.stopPropagation(); // Waves - Get Cursor Position\n\n      var _cursorPos = {\n        top: e.clientY,\n        left: e.clientX,\n        time: Date.now()\n      };\n      setCursorPos(_cursorPos);\n    }\n  };\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      active = props.active,\n      to = props.to,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"active\", \"to\"]);\n\n  var classes = classNames('nav-link', disabled ? 'disabled' : 'Ripple-parent', active && 'active', className);\n  return React.createElement(NavLink$1, _extends({\n    \"data-test\": \"nav-link\",\n    className: classes,\n    onMouseUp: handleClick,\n    onTouchStart: handleClick,\n    to: to\n  }, attributes), children, props.disabled ? false : React.createElement(Waves, {\n    cursorPos: cursorPos\n  }));\n};\n\nNavLink.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  to: propTypes.string,\n  active: propTypes.bool\n};\nNavLink.defaultProps = {\n  active: false,\n  className: '',\n  disabled: false\n};\n\nvar Notification =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Notification, _React$Component);\n\n  function Notification() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Notification);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Notification)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      componentState: _this.props.show ? 'show' : 'hide'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hide\", function () {\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (_typeof(time) === 'object') time = 0;\n      setTimeout(function () {\n        _this.setState({\n          componentState: ''\n        }, function () {\n          setTimeout(function () {\n            _this.setState({\n              componentState: 'hide'\n            });\n          }, 150);\n        });\n      }, time);\n    });\n\n    return _this;\n  }\n\n  _createClass(Notification, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.autohide > 0) this.hide(this.props.autohide);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Tag = _this$props.tag,\n          className = _this$props.className,\n          show = _this$props.show,\n          fade = _this$props.fade,\n          message = _this$props.message,\n          bodyClassName = _this$props.bodyClassName,\n          icon = _this$props.icon,\n          iconClassName = _this$props.iconClassName,\n          title = _this$props.title,\n          titleClassName = _this$props.titleClassName,\n          text = _this$props.text,\n          closeClassName = _this$props.closeClassName,\n          attributes = _objectWithoutProperties(_this$props, [\"tag\", \"className\", \"show\", \"fade\", \"message\", \"bodyClassName\", \"icon\", \"iconClassName\", \"title\", \"titleClassName\", \"text\", \"closeClassName\"]);\n\n      var classes = classNames('toast', fade && 'fade', this.state.componentState, className);\n      var headerClasses = classNames('toast-header', titleClassName);\n      var iconClassNames = classNames('mr-2', iconClassName);\n      var bodyClasses = classNames('toast-body', bodyClassName);\n      var closeClasses = classNames('ml-2', 'mb-1', closeClassName);\n      return React.createElement(Tag, _extends({\n        \"data-test\": \"notification\"\n      }, attributes, {\n        className: classes\n      }), React.createElement(\"div\", {\n        className: headerClasses\n      }, React.createElement(Fa, {\n        icon: icon,\n        className: iconClassNames,\n        size: \"lg\"\n      }), React.createElement(\"strong\", {\n        className: \"mr-auto\"\n      }, title), React.createElement(\"small\", null, text), React.createElement(MDBCloseIcon, {\n        className: closeClasses,\n        onClick: this.hide\n      })), React.createElement(\"div\", {\n        className: bodyClasses\n      }, message));\n    }\n  }]);\n\n  return Notification;\n}(React.Component);\n\nNotification.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  show: propTypes.bool,\n  fade: propTypes.bool,\n  autohide: propTypes.number,\n  iconClassName: propTypes.string,\n  title: propTypes.string,\n  text: propTypes.string,\n  titleColor: propTypes.string,\n  titleClassName: propTypes.string,\n  closeClassName: propTypes.string,\n  bodyClassName: propTypes.string,\n  bodyColor: propTypes.string,\n  message: propTypes.string\n};\nNotification.defaultProps = {\n  icon: 'square',\n  tag: 'div',\n  closeClassName: 'text-dark'\n};\n\nvar Popper = function Popper(_ref) {\n  var children = _ref.children,\n      clickable = _ref.clickable,\n      domElement = _ref.domElement,\n      modifiers = _ref.modifiers,\n      id = _ref.id,\n      isVisible = _ref.isVisible,\n      onChange = _ref.onChange,\n      placement = _ref.placement,\n      popover = _ref.popover,\n      style = _ref.style,\n      tag = _ref.tag;\n\n  var _useState = useState(isVisible),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  useEffect(function () {\n    setVisible(isVisible);\n  }, [isVisible]);\n  useEffect(function () {\n    onChange && onChange(visible);\n  }, [onChange, visible]);\n  useEffect(function () {\n    window.addEventListener('click', handleClick);\n    return function () {\n      return window.removeEventListener('click', handleClick);\n    };\n  });\n\n  function handleClick(e) {\n    var element = document.elementsFromPoint(e.clientX, e.clientY).find(function (el) {\n      return el.dataset.popper === id;\n    });\n    if (element) return;\n    setVisible(false);\n  }\n\n  var Wrapper = children[0];\n  var Content = children[1];\n  var Tag = tag;\n  var tooltipClasses = classNames(\"fade\", popover ? \"popover bs-popover-\".concat(placement, \" popover-enter-done\") : \"tooltip bs-tooltip-\".concat(placement), visible ? \"show\" : \"\");\n  var contentClasses = classNames(!popover && \"tooltip-inner\");\n  return React.createElement(Manager, {\n    \"data-test\": \"popper\"\n  }, React.createElement(Reference, null, function (_ref2) {\n    var ref = _ref2.ref;\n    return !domElement ? React.createElement(Wrapper.type, _extends({}, Wrapper.props, {\n      onMouseEnter: function onMouseEnter() {\n        return !clickable && setVisible(true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return !clickable && setVisible(false);\n      },\n      onTouchStart: function onTouchStart() {\n        return !clickable && setVisible(true);\n      },\n      onTouchEnd: function onTouchEnd() {\n        return !clickable && setVisible(false);\n      },\n      onMouseDown: function onMouseDown() {\n        return clickable && setVisible(!visible);\n      },\n      innerRef: ref,\n      \"data-popper\": id\n    })) : React.createElement(Wrapper.type, _extends({}, Wrapper.props, {\n      onMouseEnter: function onMouseEnter() {\n        return !clickable && setVisible(true);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return !clickable && setVisible(false);\n      },\n      onTouchStart: function onTouchStart() {\n        return !clickable && setVisible(true);\n      },\n      onTouchEnd: function onTouchEnd() {\n        return !clickable && setVisible(false);\n      },\n      onMouseDown: function onMouseDown() {\n        return clickable && setVisible(!visible);\n      },\n      ref: ref,\n      \"data-popper\": id\n    }));\n  }), visible && Content.props.children && React.createElement(Tag, {\n    style: style\n  }, React.createElement(Popper$1, {\n    modifiers: modifiers,\n    eventsEnabled: true,\n    positionFixed: false,\n    placement: placement\n  }, function (_ref3) {\n    var placement = _ref3.placement,\n        ref = _ref3.ref,\n        style = _ref3.style,\n        arrowProps = _ref3.arrowProps;\n    return React.createElement(Tag, {\n      ref: ref,\n      style: style,\n      \"data-placement\": placement,\n      className: tooltipClasses,\n      \"data-popper\": id\n    }, React.createElement(Content.type, _extends({}, Content.props, {\n      className: contentClasses\n    }), Content.props.children), React.createElement(\"span\", {\n      ref: arrowProps.ref,\n      style: arrowProps.style,\n      \"data-placement\": placement,\n      className: \"arrow\"\n    }));\n  })));\n};\n\nPopper.propTypes = {\n  children: propTypes.node,\n  clickable: propTypes.bool,\n  domElement: propTypes.bool,\n  modifiers: propTypes.object,\n  id: propTypes.string,\n  isVisible: propTypes.bool,\n  placement: propTypes.string,\n  popover: propTypes.bool,\n  style: propTypes.objectOf(propTypes.string),\n  tag: propTypes.string\n};\nPopper.defaultProps = {\n  clickable: false,\n  domElement: false,\n  id: 'popper',\n  isVisible: false,\n  placement: 'top',\n  popover: false,\n  style: {\n    display: 'inline-block'\n  },\n  tag: 'div'\n};\n\nvar PopoverBody = function PopoverBody(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      className = _ref.className,\n      Tag = _ref.tag;\n  var classes = classNames('popover-body', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"popover-body\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPopoverBody.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nPopoverBody.defaultProps = {\n  tag: 'div'\n};\n\nvar PopoverHeader = function PopoverHeader(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      className = _ref.className,\n      Tag = _ref.tag;\n  var classes = classNames('popover-header', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"popover-header\"\n  }, attributes, {\n    className: classes\n  }), children);\n};\n\nPopoverHeader.propTypes = {\n  children: propTypes.node,\n  className: propTypes.string,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nPopoverHeader.defaultProps = {\n  className: '',\n  tag: 'h3'\n};\n\nvar Progress = function Progress(_ref) {\n  var animated = _ref.animated,\n      barClassName = _ref.barClassName,\n      children = _ref.children,\n      className = _ref.className,\n      color = _ref.color,\n      height = _ref.height,\n      material = _ref.material,\n      max = _ref.max,\n      min = _ref.min,\n      preloader = _ref.preloader,\n      striped = _ref.striped,\n      wrapperStyle = _ref.wrapperStyle,\n      value = _ref.value,\n      attributes = _objectWithoutProperties(_ref, [\"animated\", \"barClassName\", \"children\", \"className\", \"color\", \"height\", \"material\", \"max\", \"min\", \"preloader\", \"striped\", \"wrapperStyle\", \"value\"]);\n\n  var percent = (value - min) / (max - min) * 100;\n  var progressClasses = classNames('progress', material && 'md-progress', preloader && (color ? color + '-color' : 'primary-color') + '-dark', className);\n  var progressBarClasses = classNames(preloader ? 'indeterminate' : 'progress-bar', barClassName ? barClassName : null, animated ? 'progress-bar-animated' : null, color ? \"bg-\".concat(color) : null, striped || animated ? 'progress-bar-striped' : null);\n  var computedHeight = height ? height : children && '1rem';\n\n  var computedWrapperStyle = _objectSpread({}, wrapperStyle, {\n    height: computedHeight\n  });\n\n  return React.createElement(\"div\", _extends({\n    \"data-test\": \"progress\"\n  }, attributes, {\n    className: progressClasses,\n    style: computedWrapperStyle\n  }), React.createElement(\"div\", {\n    className: progressBarClasses,\n    style: {\n      width: \"\".concat(percent, \"%\"),\n      height: computedHeight\n    },\n    role: \"progressbar\",\n    \"aria-valuenow\": value,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }, children));\n};\n\nProgress.propTypes = {\n  animated: propTypes.bool,\n  barClassName: propTypes.string,\n  children: propTypes.node,\n  className: propTypes.string,\n  color: propTypes.string,\n  height: propTypes.string,\n  material: propTypes.bool,\n  max: propTypes.number,\n  min: propTypes.number,\n  preloader: propTypes.bool,\n  striped: propTypes.bool,\n  wrapperStyle: propTypes.object,\n  value: propTypes.number\n};\nProgress.defaultProps = {\n  animated: false,\n  barClassName: '',\n  className: '',\n  color: 'indigo',\n  height: '',\n  material: false,\n  max: 100,\n  min: 0,\n  preloader: false,\n  striped: false,\n  wrapperStyle: {},\n  value: 0\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      Tag = props.tag,\n      center = props.center,\n      start = props.start,\n      end = props.end,\n      around = props.around,\n      between = props.between,\n      top = props.top,\n      bottom = props.bottom,\n      middle = props.middle,\n      attributes = _objectWithoutProperties(props, [\"className\", \"tag\", \"center\", \"start\", \"end\", \"around\", \"between\", \"top\", \"bottom\", \"middle\"]);\n\n  var classes = classNames(\"row\", end && \"justify-content-end\", start && \"justify-content-start\", center && \"justify-content-center\", between && \"justify-content-between\", around && \"justify-content-around\", top && \"align-self-start\", middle && \"align-self-center\", bottom && \"align-self-end\", className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"row\"\n  }, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = {\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string]),\n  className: propTypes.string,\n  top: propTypes.bool,\n  bottom: propTypes.bool,\n  middle: propTypes.bool,\n  end: propTypes.bool,\n  start: propTypes.bool,\n  center: propTypes.bool,\n  between: propTypes.bool,\n  around: propTypes.bool\n};\nRow.defaultProps = {\n  tag: \"div\"\n};\nvar propTypes$1 = {\n  activeItem: propTypes.any,\n  tabId: propTypes.any,\n  className: propTypes.string\n};\n\nvar TabContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TabContent, _React$Component);\n\n  function TabContent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabContent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabContent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeItem: _this.props.activeItem\n    });\n\n    return _this;\n  }\n\n  _createClass(TabContent, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        activeItemId: this.state.activeItem\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = this.props.className;\n      var attributes = omit(this.props, Object.keys(propTypes$1));\n      var classes = classNames('tab-content', className);\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"tabContent\"\n      }, attributes, {\n        className: classes\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      return prevState.activeItem !== nextProps.activeItem ? {\n        activeItem: nextProps.activeItem\n      } : null;\n    }\n  }]);\n\n  return TabContent;\n}(React.Component);\n\nTabContent.childContextTypes = {\n  activeItemId: propTypes.any\n};\nTabContent.propTypes = propTypes$1;\n\nvar TabPane =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TabPane, _React$Component);\n\n  function TabPane() {\n    _classCallCheck(this, TabPane);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TabPane).apply(this, arguments));\n  }\n\n  _createClass(TabPane, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          tabId = _this$props.tabId,\n          attributes = _objectWithoutProperties(_this$props, [\"className\", \"tabId\"]);\n\n      var classes = classNames('tab-pane', {\n        active: tabId === this.context.activeItemId\n      }, className);\n      return React.createElement(\"div\", _extends({\n        \"data-test\": \"tab-pane\"\n      }, attributes, {\n        className: classes,\n        role: \"tabpanel\"\n      }));\n    }\n  }]);\n\n  return TabPane;\n}(React.Component);\n\nTabPane.contextTypes = {\n  activeItemId: propTypes.any\n};\nTabPane.propTypes = {\n  tabId: propTypes.any,\n  className: propTypes.string\n};\n\nvar TableHead = function TableHead(props) {\n  var _classNames;\n\n  var children = props.children,\n      color = props.color,\n      columns = props.columns,\n      textWhite = props.textWhite,\n      attributes = _objectWithoutProperties(props, [\"children\", \"color\", \"columns\", \"textWhite\"]);\n\n  var isTheadColor = color === 'dark' || color === 'light';\n  var classes = classNames((_classNames = {\n    'text-white': textWhite\n  }, _defineProperty(_classNames, \"thead-\".concat(color), color && isTheadColor), _defineProperty(_classNames, \"\".concat(color), color && !isTheadColor), _classNames));\n  return React.createElement(\"thead\", _extends({\n    \"data-test\": \"table-head\"\n  }, attributes, {\n    className: classes\n  }), columns && React.createElement(\"tr\", null, columns.map(function (col) {\n    return React.createElement(\"th\", {\n      key: col.field,\n      className: col.hasOwnProperty('minimal') ? \"th-\".concat(col.minimal) : ''\n    }, col.label);\n  })), children);\n};\n\nTableHead.propTypes = {\n  children: propTypes.node,\n  color: propTypes.string,\n  columns: propTypes.arrayOf(propTypes.object),\n  textWhite: propTypes.bool\n};\nTableHead.defaultProps = {\n  textWhite: false\n};\nvar TreeviewContext = React.createContext();\n\nvar Treeview = function Treeview(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  useEffect(function () {\n    if (props.getValue) {\n      props.getValue({\n        item: active ? active.closest('li') : active,\n        value: active ? active.closest('li').childNodes[1].textContent : active\n      });\n    }\n  }, [active, props]);\n\n  var getActive = function getActive(target) {\n    setActive(target);\n    return target;\n  };\n\n  var theme = props.theme,\n      children = props.children,\n      className = props.className,\n      getValue = props.getValue,\n      header = props.header,\n      listClassName = props.listClassName,\n      Tag = props.tag,\n      attributes = _objectWithoutProperties(props, [\"theme\", \"children\", \"className\", \"getValue\", \"header\", \"listClassName\", \"tag\"]);\n\n  var classes = classNames('border', theme ? \"treeview-\".concat(theme) : 'treeview', className);\n  var ulClasses = classNames('list-unstyled', header ? 'pb-2 mb-1' : 'py-2 my-1', theme && \"treeview-\".concat(theme, \"-list\"), theme === 'animated' || !theme && 'pl-3', listClassName);\n  var head = header && React.createElement(React.Fragment, null, React.createElement(\"h6\", {\n    className: \"pt-3 pl-3\"\n  }, header), React.createElement(\"hr\", null));\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"treeview\"\n  }, attributes, {\n    className: classes\n  }), head, React.createElement(\"ul\", {\n    className: ulClasses\n  }, React.createElement(TreeviewContext.Provider, {\n    value: {\n      active: active,\n      theme: theme,\n      getActive: getActive\n    }\n  }, children)));\n};\n\nTreeview.propTypes = {\n  className: propTypes.string,\n  header: propTypes.string,\n  listClassName: propTypes.string,\n  tag: propTypes.string,\n  theme: propTypes.string,\n  getValue: propTypes.func\n};\nTreeview.defaultProps = {\n  tag: 'div',\n  theme: '',\n  getValue: function getValue() {}\n};\n\nvar TreeviewItem = function TreeviewItem(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      target = _useState2[0],\n      setTarget = _useState2[1];\n\n  var targetRef = useRef(null);\n\n  var className = props.className,\n      disabled = props.disabled,\n      disabledClassName = props.disabledClassName,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      icon = props.icon,\n      opened = props.opened,\n      Tag = props.tag,\n      title = props.title,\n      attributes = _objectWithoutProperties(props, [\"className\", \"disabled\", \"disabledClassName\", \"fab\", \"fal\", \"far\", \"icon\", \"opened\", \"tag\", \"title\"]);\n\n  var _useContext = useContext(TreeviewContext),\n      theme = _useContext.theme,\n      active = _useContext.active,\n      getActive = _useContext.getActive;\n\n  useEffect(function () {\n    if (targetRef && targetRef.current) {\n      setTarget(targetRef.current);\n    }\n  }, []);\n\n  var handleClick = function handleClick() {\n    if (!disabled) {\n      target.classList.contains('opened') ? getActive(null) : getActive(target);\n    }\n  };\n\n  var classes = classNames(disabled && disabledClassName, theme && \"treeview-\".concat(theme, \"-items treeview-\").concat(theme, \"-element closed mb-1\"), active === target && !active.classList.contains('opened') ? 'opened' : '', className);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"treeview-item\"\n  }, attributes, {\n    className: classes,\n    ref: targetRef,\n    onMouseDown: handleClick,\n    style: {\n      transform: 'translateY(0.3em)'\n    }\n  }), React.createElement(Fa, {\n    className: \"mr-2\",\n    fab: fab,\n    fal: fal,\n    far: far,\n    icon: icon\n  }), React.createElement(\"span\", null, title));\n};\n\nTreeviewItem.propTypes = {\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  disabledClassName: propTypes.string,\n  fab: propTypes.bool,\n  fal: propTypes.bool,\n  far: propTypes.bool,\n  icon: propTypes.string,\n  opened: propTypes.bool,\n  tag: propTypes.oneOfType([propTypes.func, propTypes.string])\n};\nTreeviewItem.defaultProps = {\n  disabled: false,\n  fab: false,\n  fal: false,\n  far: false,\n  icon: 'folder-open',\n  opened: false,\n  tag: 'li'\n};\n\nvar TreeviewList = function TreeviewList(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      opened = _useState2[0],\n      setOpen = _useState2[1];\n\n  useEffect(function () {\n    setOpen(props.opened);\n  }, [props.opened]);\n\n  var handleSwitch = function handleSwitch() {\n    return setOpen(!opened);\n  };\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      disabledClassName = props.disabledClassName,\n      fab = props.fab,\n      fal = props.fal,\n      far = props.far,\n      icon = props.icon,\n      _ = props.opened,\n      Tag = props.tag,\n      title = props.title,\n      attributes = _objectWithoutProperties(props, [\"children\", \"className\", \"disabled\", \"disabledClassName\", \"fab\", \"fal\", \"far\", \"icon\", \"opened\", \"tag\", \"title\"]);\n\n  var _useContext = useContext(TreeviewContext),\n      theme = _useContext.theme;\n\n  var nestedClasses = classNames('nested', opened && 'active');\n  var folder = classNames(theme && \"closed treeview-\".concat(theme, \"-element d-block\"), !children && 'ml-2', opened && 'opened', disabled && disabledClassName);\n  var classes = classNames(theme && \"treeview-\".concat(theme, \"-items px-0\"), className);\n  var iconClasses = classNames(theme ? 'mx-2' : 'mr-2');\n  var child = children && React.createElement(\"ul\", {\n    className: nestedClasses,\n    style: {\n      height: 'calc(100% + 0.6rem)',\n      marginLeft: '2px'\n    }\n  }, children);\n  var collapse = theme && React.createElement(Collapse, {\n    isOpen: opened\n  }, child);\n  var iconArrow = theme !== 'colorful' ? 'angle-right' : opened ? 'minus-circle' : 'plus-circle';\n  var arrow = children && React.createElement(Fa, {\n    icon: iconArrow,\n    rotate: theme !== 'colorful' ? opened ? '90 down' : '0' : '',\n    className: \"rotate\"\n  });\n  var btn = children && React.createElement(Button, {\n    flat: true,\n    className: \"m-0 py-0 px-1 mr-1 z-depth-0\",\n    onClick: handleSwitch\n  }, arrow);\n  return React.createElement(Tag, _extends({\n    \"data-test\": \"treeview-list\"\n  }, attributes, {\n    className: classes\n  }), React.createElement(\"span\", {\n    className: folder,\n    onClick: !disabled && theme ? handleSwitch : null\n  }, theme ? arrow : btn, React.createElement(\"span\", null, React.createElement(Fa, {\n    className: iconClasses,\n    fab: fab,\n    fal: fal,\n    far: far,\n    icon: icon\n  }), title)), collapse || child);\n};\n\nTreeviewList.propTypes = {\n  className: propTypes.string,\n  disabled: propTypes.bool,\n  disabledClassName: propTypes.string,\n  fab: propTypes.bool,\n  fal: propTypes.bool,\n  far: propTypes.bool,\n  icon: propTypes.string,\n  opened: propTypes.bool,\n  tag: propTypes.string\n};\nTreeviewList.defaultProps = {\n  disabled: false,\n  fab: false,\n  fal: false,\n  far: false,\n  icon: 'folder-open',\n  opened: false,\n  tag: 'li'\n};\nTreeviewList.contextTypes = {\n  theme: propTypes.string\n}; // FREE\n\nexport { Alert, Animation, Badge, Breadcrumb, BreadcrumbItem, Button, ButtonGroup, ButtonToolbar, Card, CardBody, CardFooter, CardGroup, CardHeader, CardImage, CardText, CardTitle, Carousel, CarouselCaption, Control as CarouselControl, CarouselIndicator, CarouselIndicators, CarouselInner, CarouselItem, MDBCloseIcon as CloseIcon, Col, Collapse, Container, DataTable, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, EdgeHeader, Fa, Footer, FormInline, FreeBird, HamburgerToggler, Iframe, Input, InputGroup, InputNumeric, Jumbotron, ListGroup, ListGroupItem, Alert as MDBAlert, Animation as MDBAnimation, Badge as MDBBadge, Breadcrumb as MDBBreadcrumb, BreadcrumbItem as MDBBreadcrumbItem, Button as MDBBtn, ButtonGroup as MDBBtnGroup, ButtonToolbar as MDBBtnToolbar, Card as MDBCard, CardBody as MDBCardBody, CardFooter as MDBCardFooter, CardGroup as MDBCardGroup, CardHeader as MDBCardHeader, CardImage as MDBCardImage, CardText as MDBCardText, CardTitle as MDBCardTitle, Carousel as MDBCarousel, CarouselCaption as MDBCarouselCaption, CarouselIndicator as MDBCarouselIndicator, CarouselIndicators as MDBCarouselIndicators, CarouselInner as MDBCarouselInner, CarouselItem as MDBCarouselItem, MDBCloseIcon, Col as MDBCol, Collapse as MDBCollapse, Container as MDBContainer, Control as MDBControl, DataTable as MDBDataTable, Dropdown as MDBDropdown, DropdownItem as MDBDropdownItem, DropdownMenu as MDBDropdownMenu, DropdownToggle as MDBDropdownToggle, EdgeHeader as MDBEdgeHeader, Footer as MDBFooter, FormInline as MDBFormInline, FreeBird as MDBFreeBird, HamburgerToggler as MDBHamburgerToggler, Fa as MDBIcon, Iframe as MDBIframe, Input as MDBInput, InputGroup as MDBInputGroup, InputNumeric as MDBInputSelect, Jumbotron as MDBJumbotron, ListGroup as MDBListGroup, ListGroupItem as MDBListGroupItem, Mask as MDBMask, Media as MDBMedia, Modal as MDBModal, ModalBody as MDBModalBody, ModalFooter as MDBModalFooter, ModalHeader as MDBModalHeader, Nav as MDBNav, NavItem as MDBNavItem, NavLink as MDBNavLink, Navbar as MDBNavbar, NavbarBrand as MDBNavbarBrand, NavbarNav as MDBNavbarNav, NavbarToggler as MDBNavbarToggler, Notification as MDBNotification, PageItem as MDBPageItem, PageLink as MDBPageNav, Pagination as MDBPagination, Popper as MDBPopover, PopoverBody as MDBPopoverBody, PopoverHeader as MDBPopoverHeader, Popper as MDBPopper, Progress as MDBProgress, Row as MDBRow, TabContent as MDBTabContent, TabPane as MDBTabPane, Table as MDBTable, TableBody as MDBTableBody, TableFoot as MDBTableFoot, TableHead as MDBTableHead, Popper as MDBTooltip, Treeview as MDBTreeview, TreeviewItem as MDBTreeviewItem, TreeviewList as MDBTreeviewList, View as MDBView, Waves as MDBWaves, Mask, Media, Modal, ModalBody, ModalFooter, ModalHeader, Nav, NavItem, NavLink, Navbar, NavbarBrand, NavbarNav, NavbarToggler, Notification, PageItem, PageLink, Pagination, Popper as Popover, PopoverBody, PopoverHeader, Popper, Progress, Row, TabContent, TabPane, Table, TableBody, TableFoot, TableHead, Popper as Tooltip, Treeview, TreeviewItem, TreeviewList, View, Waves };","map":null,"metadata":{},"sourceType":"module"}