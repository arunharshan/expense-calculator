{"ast":null,"code":"import _defineProperty from \"/Users/fnuarunh/tutorials/expense-calculator-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/fnuarunh/tutorials/expense-calculator-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/fnuarunh/tutorials/expense-calculator-react/src/components/ExpenseFormElements.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { MDBInput, MDBAlert } from 'mdbreact';\nimport PropTypes from 'prop-types';\nimport SelectBox from './SelectBox';\nimport uuidv4 from 'uuid';\nimport { currentDate } from '../utils';\n\nconst ExpenseFormElements = ({\n  onFormSubmit,\n  onCancel,\n  edit,\n  inputs\n}) => {\n  const _useState = useState({\n    title: inputs.title ? inputs.title : '',\n    description: inputs.description ? inputs.description : '',\n    amount: inputs.amount ? inputs.amount : '',\n    category: inputs.category ? inputs.category : 1\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formInputs = _useState2[0],\n        setFormInputs = _useState2[1]; // set a default dropdown value 1\n\n\n  const inputRef = useRef(null);\n  const pageRef = useRef(null);\n  useEffect(() => {\n    if (inputRef) inputRef.current.setFocus();\n\n    if (edit.status && pageRef) {\n      pageRef.current.scrollIntoView();\n    }\n  }, [inputs, edit.status]);\n\n  const _useState3 = useState({\n    isError: false,\n    message: null\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        hasFieldError = _useState4[0],\n        setHasFieldError = _useState4[1];\n\n  const onChangeHandler = e => {\n    let value = '';\n    let name = ''; // hack to check the input is select. Select return a number only 1,2.. etc.\n\n    if (e.target) {\n      value = e.target.value;\n      name = e.target.name;\n      e.persist();\n    } else {\n      name = 'category';\n      value = parseInt(e);\n    }\n\n    setFormInputs(values => _objectSpread({}, values, {\n      cid: uuidv4(),\n      [name]: value,\n      createdOn: currentDate()\n    }));\n  };\n\n  const cancelHandler = () => {\n    onCancel(false);\n  };\n\n  const getSelectedOption = x => {\n    console.log('selected option on edit is', x);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    setHasFieldError(value => _objectSpread({}, value, {\n      isError: false\n    }));\n    e.target.className += ' was-validated';\n\n    if (formInputs.title && formInputs.description && formInputs.amount && formInputs.category) {\n      if (formInputs.amount < 5 || formInputs.amount > 3000) {\n        setHasFieldError(value => _objectSpread({}, value, {\n          isError: true,\n          message: 'Enter $ amount between 5 and 3000'\n        }));\n      } else {\n        onFormSubmit({\n          data: formInputs,\n          id: inputs.id\n        });\n      }\n    } else {\n      setHasFieldError(value => _objectSpread({}, value, {\n        isError: true,\n        message: 'Please fill all the fields'\n      }));\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    noValidate: true,\n    ref: pageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modal-body mx-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, hasFieldError.isError && React.createElement(MDBAlert, {\n    color: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, hasFieldError.message), React.createElement(\"div\", {\n    className: \"md-form mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(MDBInput, {\n    ref: inputRef,\n    label: \"Title\",\n    group: true,\n    type: \"text\",\n    name: \"title\",\n    id: \"title\",\n    required: true,\n    error: \"Enter title\",\n    success: \"right\",\n    maxLength: \"40\",\n    value: formInputs.title,\n    onChange: onChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, ' ', React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Please enter title.\"))), React.createElement(\"div\", {\n    className: \"md-form mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(MDBInput, {\n    label: \"Amount\",\n    group: true,\n    type: \"number\",\n    name: \"amount\",\n    required: true,\n    error: \"Enter amount\",\n    success: \"right\",\n    value: formInputs.amount,\n    onChange: onChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, ' ', React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Please enter amount between 5 - 3000.\"))), React.createElement(\"div\", {\n    className: \"md-formd mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(SelectBox, {\n    name: \"category\",\n    style: \"custom-select\",\n    label: edit ? 'Change category' : 'Select category',\n    selected: formInputs.category,\n    optionSelect: getSelectedOption,\n    optionChange: onChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"md-form mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(MDBInput, {\n    label: \"Description\",\n    group: true,\n    type: \"textarea\",\n    name: \"description\",\n    required: true,\n    error: \"Enter description\",\n    success: \"right\",\n    value: formInputs.description,\n    onChange: onChangeHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, ' ', React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Please enter description.\")))), React.createElement(\"div\", {\n    className: \"mt-3 mb-2 d-flex justify-content-center align-items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-grad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Save\"), React.createElement(\"a\", {\n    href: null,\n    className: \"text-warning ml-3 font-weight-normal\",\n    onClick: cancelHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"CANCEL\"))));\n};\n\nExpenseFormElements.defaultProps = {\n  inputs: [{\n    title: '',\n    description: '',\n    amount: '',\n    category: 1\n  }]\n};\nexport default ExpenseFormElements;","map":{"version":3,"sources":["/Users/fnuarunh/tutorials/expense-calculator-react/src/components/ExpenseFormElements.js"],"names":["React","useState","useRef","useEffect","MDBInput","MDBAlert","PropTypes","SelectBox","uuidv4","currentDate","ExpenseFormElements","onFormSubmit","onCancel","edit","inputs","title","description","amount","category","formInputs","setFormInputs","inputRef","pageRef","current","setFocus","status","scrollIntoView","isError","message","hasFieldError","setHasFieldError","onChangeHandler","e","value","name","target","persist","parseInt","values","cid","createdOn","cancelHandler","getSelectedOption","x","console","log","submitHandler","preventDefault","className","data","id","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { MDBInput, MDBAlert } from 'mdbreact';\nimport PropTypes from 'prop-types';\nimport SelectBox from './SelectBox';\nimport uuidv4 from 'uuid';\nimport { currentDate } from '../utils';\nconst ExpenseFormElements = ({ onFormSubmit, onCancel, edit, inputs }) => {\n  const [formInputs, setFormInputs] = useState({\n    title: inputs.title ? inputs.title : '',\n    description: inputs.description ? inputs.description : '',\n    amount: inputs.amount ? inputs.amount : '',\n    category: inputs.category ? inputs.category : 1\n  }); // set a default dropdown value 1\n\n  const inputRef = useRef(null);\n  const pageRef = useRef(null);\n\n  useEffect(() => {\n    if (inputRef) inputRef.current.setFocus();\n    if (edit.status && pageRef) {\n      pageRef.current.scrollIntoView();\n    }\n  }, [inputs, edit.status]);\n\n  const [hasFieldError, setHasFieldError] = useState({\n    isError: false,\n    message: null\n  });\n  const onChangeHandler = e => {\n    let value = '';\n    let name = '';\n    // hack to check the input is select. Select return a number only 1,2.. etc.\n    if (e.target) {\n      value = e.target.value;\n      name = e.target.name;\n      e.persist();\n    } else {\n      name = 'category';\n      value = parseInt(e);\n    }\n    setFormInputs(values => ({\n      ...values,\n      cid: uuidv4(),\n      [name]: value,\n      createdOn: currentDate()\n    }));\n  };\n  const cancelHandler = () => {\n    onCancel(false);\n  };\n  const getSelectedOption = x => {\n    console.log('selected option on edit is', x);\n  };\n  const submitHandler = e => {\n    e.preventDefault();\n    setHasFieldError(value => ({ ...value, isError: false }));\n    e.target.className += ' was-validated';\n\n    if (\n      formInputs.title &&\n      formInputs.description &&\n      formInputs.amount &&\n      formInputs.category\n    ) {\n      if (formInputs.amount < 5 || formInputs.amount > 3000) {\n        setHasFieldError(value => ({\n          ...value,\n          isError: true,\n          message: 'Enter $ amount between 5 and 3000'\n        }));\n      } else {\n        onFormSubmit({ data: formInputs, id: inputs.id });\n      }\n    } else {\n      setHasFieldError(value => ({\n        ...value,\n        isError: true,\n        message: 'Please fill all the fields'\n      }));\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={submitHandler} noValidate ref={pageRef}>\n        <div className='modal-body mx-3'>\n          {hasFieldError.isError && (\n            <MDBAlert color='danger'>{hasFieldError.message}</MDBAlert>\n          )}\n          <div className='md-form mb-5'>\n            <MDBInput\n              ref={inputRef}\n              label='Title'\n              group\n              type='text'\n              name='title'\n              id='title'\n              required\n              error='Enter title'\n              success='right'\n              maxLength='40'\n              value={formInputs.title}\n              onChange={onChangeHandler}\n            >\n              {' '}\n              <div className='invalid-feedback'>Please enter title.</div>\n            </MDBInput>\n          </div>\n          <div className='md-form mb-5'>\n            <MDBInput\n              label='Amount'\n              group\n              type='number'\n              name='amount'\n              required\n              error='Enter amount'\n              success='right'\n              value={formInputs.amount}\n              onChange={onChangeHandler}\n            >\n              {' '}\n              <div className='invalid-feedback'>\n                Please enter amount between 5 - 3000.\n              </div>\n            </MDBInput>\n          </div>\n          <div className='md-formd mb-4'>\n            <SelectBox\n              name='category'\n              style='custom-select'\n              label={edit ? 'Change category' : 'Select category'}\n              selected={formInputs.category}\n              optionSelect={getSelectedOption}\n              optionChange={onChangeHandler}\n            />\n          </div>\n          <div className='md-form mb-4'>\n            <MDBInput\n              label='Description'\n              group\n              type='textarea'\n              name='description'\n              required\n              error='Enter description'\n              success='right'\n              value={formInputs.description}\n              onChange={onChangeHandler}\n            >\n              {' '}\n              <div className='invalid-feedback'>Please enter description.</div>\n            </MDBInput>\n          </div>\n        </div>\n        <div className='mt-3 mb-2 d-flex justify-content-center align-items-center'>\n          <button type='submit' className='btn btn-grad'>\n            Save\n          </button>\n          <a\n            href={null}\n            className='text-warning ml-3 font-weight-normal'\n            onClick={cancelHandler}\n          >\n            CANCEL\n          </a>\n        </div>\n      </form>\n    </>\n  );\n};\n\nExpenseFormElements.defaultProps = {\n  inputs: [\n    {\n      title: '',\n      description: '',\n      amount: '',\n      category: 1\n    }\n  ]\n};\n\nexport default ExpenseFormElements;\n"]},"metadata":{},"sourceType":"module"}