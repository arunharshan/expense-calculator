{"ast":null,"code":"import _defineProperty from \"/Users/fnuarunh/tutorials/expense-calculator-react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/fnuarunh/tutorials/expense-calculator-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/fnuarunh/tutorials/expense-calculator-react/src/components/SelectBox.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchCategory } from '../actions/categoryActions';\n\nconst SelectBox = ({\n  selected,\n  style,\n  disable,\n  label,\n  optionChange\n}) => {\n  const dispatch = useDispatch();\n  const categoryState = useSelector(state => state.categories);\n\n  const _useState = useState(selected ? selected : 1),\n        _useState2 = _slicedToArray(_useState, 2),\n        select = _useState2[0],\n        setSelect = _useState2[1];\n\n  useEffect(() => {\n    const loadCat = () => {\n      dispatch(fetchCategory());\n    };\n\n    loadCat();\n  }, [dispatch]);\n  useEffect(() => {\n    setSelect(selected ? selected : 1);\n  }, [selected]);\n\n  const onChangeHandler = e => {\n    const val = e.target.value;\n    setSelect(value => _objectSpread({}, value, {\n      val\n    }));\n    optionChange(e.target.value);\n  };\n\n  if (categoryState.category) {\n    return React.createElement(React.Fragment, null, React.createElement(\"label\", {\n      className: \"label-sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, label), React.createElement(\"select\", {\n      className: \"browser-default \".concat(style),\n      value: select,\n      disabled: disable,\n      onChange: onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, categoryState.category.map(cat => {\n      return React.createElement(\"option\", {\n        value: cat.id,\n        key: cat.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, cat.value);\n    })), React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Please select category.\"));\n  } else {\n    return null;\n  }\n};\n\nexport default SelectBox;","map":{"version":3,"sources":["/Users/fnuarunh/tutorials/expense-calculator-react/src/components/SelectBox.js"],"names":["React","useState","useEffect","useSelector","useDispatch","fetchCategory","SelectBox","selected","style","disable","label","optionChange","dispatch","categoryState","state","categories","select","setSelect","loadCat","onChangeHandler","e","val","target","value","category","map","cat","id"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,aAAT,QAA8B,4BAA9B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,KAA5B;AAAmCC,EAAAA;AAAnC,CAAD,KAAuD;AACvE,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,aAAa,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,UAAhB,CAAjC;;AAFuE,oBAG3Cd,QAAQ,CAACM,QAAQ,GAAGA,QAAH,GAAc,CAAvB,CAHmC;AAAA;AAAA,QAGhES,MAHgE;AAAA,QAGxDC,SAHwD;;AAIvEf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,OAAO,GAAG,MAAM;AACpBN,MAAAA,QAAQ,CAACP,aAAa,EAAd,CAAR;AACD,KAFD;;AAGAa,IAAAA,OAAO;AACR,GALQ,EAKN,CAACN,QAAD,CALM,CAAT;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,SAAS,CAACV,QAAQ,GAAGA,QAAH,GAAc,CAAvB,CAAT;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;;AAGA,QAAMY,eAAe,GAAGC,CAAC,IAAI;AAC3B,UAAMC,GAAG,GAAGD,CAAC,CAACE,MAAF,CAASC,KAArB;AACAN,IAAAA,SAAS,CAACM,KAAK,sBAAUA,KAAV;AAAiBF,MAAAA;AAAjB,MAAN,CAAT;AACAV,IAAAA,YAAY,CAACS,CAAC,CAACE,MAAF,CAASC,KAAV,CAAZ;AACD,GAJD;;AAKA,MAAIV,aAAa,CAACW,QAAlB,EAA4B;AAC1B,WACE,0CACE;AAAO,MAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6Bd,KAA7B,CADF,EAEE;AACE,MAAA,SAAS,4BAAqBF,KAArB,CADX;AAEE,MAAA,KAAK,EAAEQ,MAFT;AAGE,MAAA,QAAQ,EAAEP,OAHZ;AAIE,MAAA,QAAQ,EAAEU,eAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGN,aAAa,CAACW,QAAd,CAAuBC,GAAvB,CAA2BC,GAAG,IAAI;AACjC,aACE;AAAQ,QAAA,KAAK,EAAEA,GAAG,CAACC,EAAnB;AAAuB,QAAA,GAAG,EAAED,GAAG,CAACC,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,GAAG,CAACH,KADP,CADF;AAKD,KANA,CANH,CAFF,EAiBE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAjBF,CADF;AAqBD,GAtBD,MAsBO;AACL,WAAO,IAAP;AACD;AACF,CA3CD;;AA6CA,eAAejB,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchCategory } from '../actions/categoryActions';\n\nconst SelectBox = ({ selected, style, disable, label, optionChange }) => {\n  const dispatch = useDispatch();\n  const categoryState = useSelector(state => state.categories);\n  const [select, setSelect] = useState(selected ? selected : 1);\n  useEffect(() => {\n    const loadCat = () => {\n      dispatch(fetchCategory());\n    };\n    loadCat();\n  }, [dispatch]);\n  useEffect(() => {\n    setSelect(selected ? selected : 1);\n  }, [selected]);\n  const onChangeHandler = e => {\n    const val = e.target.value;\n    setSelect(value => ({ ...value, val }));\n    optionChange(e.target.value);\n  };\n  if (categoryState.category) {\n    return (\n      <>\n        <label className='label-sm'>{label}</label>\n        <select\n          className={`browser-default ${style}`}\n          value={select}\n          disabled={disable}\n          onChange={onChangeHandler}\n        >\n          {categoryState.category.map(cat => {\n            return (\n              <option value={cat.id} key={cat.id}>\n                {cat.value}\n              </option>\n            );\n          })}\n        </select>\n\n        <div className='invalid-feedback'>Please select category.</div>\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default SelectBox;\n"]},"metadata":{},"sourceType":"module"}